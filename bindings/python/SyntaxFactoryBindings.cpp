
//------------------------------------------------------------------------------
//! @file SyntaxFactoryBindings.cpp
//! @brief Generated SyntaxFactoryBindings 
//
// SPDX-FileCopyrightText: Easics
// SPDX-License-Identifier: MIT
//------------------------------------------------------------------------------
#include "pyslang.h"
#include "slang/syntax/AllSyntax.h"

void registerSyntaxFactory(py::module_& m) {
    py::class_<SyntaxFactory> SyntaxFactory(m, "SyntaxFactory");
    SyntaxFactory.def(py::init<BumpAllocator&>(), "alloc"_a);
    SyntaxFactory.def("acceptOnPropertyExpr",&SyntaxFactory::acceptOnPropertyExpr ,py::arg("keyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr);
    SyntaxFactory.def("actionBlock",&SyntaxFactory::actionBlock ,py::arg("statement") = nullptr ,py::arg("ElseClauseSyntax*") = nullptr);
    SyntaxFactory.def("anonymousProgram",&SyntaxFactory::anonymousProgram ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("ansiPortList",&SyntaxFactory::ansiPortList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("ansiUdpPortList",&SyntaxFactory::ansiUdpPortList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("argumentList",&SyntaxFactory::argumentList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("arrayOrRandomizeMethodExpression",&SyntaxFactory::arrayOrRandomizeMethodExpression ,py::arg("method") = nullptr ,py::arg("Token") = nullptr ,py::arg("ParenExpressionListSyntax*") = nullptr ,py::arg("ConstraintBlockSyntax*") = nullptr);
    SyntaxFactory.def("assertionItemPortList",&SyntaxFactory::assertionItemPortList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("assertionItemPort",&SyntaxFactory::assertionItemPort ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("EqualsAssertionArgClauseSyntax*") = nullptr);
    SyntaxFactory.def("assignmentPatternExpression",&SyntaxFactory::assignmentPatternExpression ,py::arg("type") = nullptr ,py::arg("AssignmentPatternSyntax&") = nullptr);
    SyntaxFactory.def("assignmentPatternItem",&SyntaxFactory::assignmentPatternItem ,py::arg("key") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("attributeInstance",&SyntaxFactory::attributeInstance ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("attributeSpec",&SyntaxFactory::attributeSpec ,py::arg("name") = Token() ,py::arg("EqualsValueClauseSyntax*") = nullptr);
    SyntaxFactory.def("badExpression",&SyntaxFactory::badExpression ,py::arg("expr") = nullptr);
    SyntaxFactory.def("beginKeywordsDirective",&SyntaxFactory::beginKeywordsDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("binSelectWithFilterExpr",&SyntaxFactory::binSelectWithFilterExpr ,py::arg("expr") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("MatchesClauseSyntax*") = nullptr);
    SyntaxFactory.def("binaryBinsSelectExpr",&SyntaxFactory::binaryBinsSelectExpr ,py::arg("left") = nullptr ,py::arg("Token") = nullptr ,py::arg("BinsSelectExpressionSyntax&") = nullptr);
    SyntaxFactory.def("binaryBlockEventExpression",&SyntaxFactory::binaryBlockEventExpression ,py::arg("left") = nullptr ,py::arg("Token") = nullptr ,py::arg("BlockEventExpressionSyntax&") = nullptr);
    SyntaxFactory.def("binaryConditionalDirectiveExpression",&SyntaxFactory::binaryConditionalDirectiveExpression ,py::arg("left") = nullptr ,py::arg("Token") = nullptr ,py::arg("ConditionalDirectiveExpressionSyntax&") = nullptr);
    SyntaxFactory.def("binaryEventExpression",&SyntaxFactory::binaryEventExpression ,py::arg("left") = nullptr ,py::arg("Token") = nullptr ,py::arg("EventExpressionSyntax&") = nullptr);
    SyntaxFactory.def("binaryExpression",&SyntaxFactory::binaryExpression ,py::arg("kind") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("binaryPropertyExpr",&SyntaxFactory::binaryPropertyExpr ,py::arg("kind") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr);
    SyntaxFactory.def("binarySequenceExpr",&SyntaxFactory::binarySequenceExpr ,py::arg("kind") = nullptr ,py::arg("SequenceExprSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("SequenceExprSyntax&") = nullptr);
    SyntaxFactory.def("bindDirective",&SyntaxFactory::bindDirective ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("NameSyntax&") = nullptr ,py::arg("BindTargetListSyntax*") = nullptr ,py::arg("MemberSyntax&") = nullptr);
    SyntaxFactory.def("bindTargetList",&SyntaxFactory::bindTargetList ,py::arg("colon") = Token() ,py::arg("const") = nullptr);
    SyntaxFactory.def("binsSelectConditionExpr",&SyntaxFactory::binsSelectConditionExpr ,py::arg("binsof") = Token() ,py::arg("Token") = nullptr ,py::arg("NameSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("IntersectClauseSyntax*") = nullptr);
    SyntaxFactory.def("binsSelection",&SyntaxFactory::binsSelection ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("BinsSelectExpressionSyntax&") = nullptr ,py::arg("CoverageIffClauseSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("bitSelect",&SyntaxFactory::bitSelect ,py::arg("expr") = nullptr);
    SyntaxFactory.def("blockCoverageEvent",&SyntaxFactory::blockCoverageEvent ,py::arg("atat") = Token() ,py::arg("Token") = nullptr ,py::arg("BlockEventExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("blockStatement",&SyntaxFactory::blockStatement ,py::arg("kind") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("caseGenerate",&SyntaxFactory::caseGenerate ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("casePropertyExpr",&SyntaxFactory::casePropertyExpr ,py::arg("caseKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("caseStatement",&SyntaxFactory::caseStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("castExpression",&SyntaxFactory::castExpression ,py::arg("left") = nullptr ,py::arg("Token") = nullptr ,py::arg("ParenthesizedExpressionSyntax&") = nullptr);
    SyntaxFactory.def("cellConfigRule",&SyntaxFactory::cellConfigRule ,py::arg("cell") = Token() ,py::arg("ConfigCellIdentifierSyntax&") = nullptr ,py::arg("ConfigRuleClauseSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("chargeStrength",&SyntaxFactory::chargeStrength ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("checkerDataDeclaration",&SyntaxFactory::checkerDataDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataDeclarationSyntax&") = nullptr);
    SyntaxFactory.def("checkerDeclaration",&SyntaxFactory::checkerDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("AssertionItemPortListSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("checkerInstanceStatement",&SyntaxFactory::checkerInstanceStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("CheckerInstantiationSyntax&") = nullptr);
    SyntaxFactory.def("checkerInstantiation",&SyntaxFactory::checkerInstantiation ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("NameSyntax&") = nullptr ,py::arg("ParameterValueAssignmentSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("classDeclaration",&SyntaxFactory::classDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ClassSpecifierSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("ParameterPortListSyntax*") = nullptr ,py::arg("ExtendsClauseSyntax*") = nullptr ,py::arg("ImplementsClauseSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("classMethodDeclaration",&SyntaxFactory::classMethodDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("const") = nullptr ,py::arg("FunctionDeclarationSyntax&") = nullptr);
    SyntaxFactory.def("classMethodPrototype",&SyntaxFactory::classMethodPrototype ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("const") = nullptr ,py::arg("FunctionPrototypeSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("className",&SyntaxFactory::className ,py::arg("identifier") = Token() ,py::arg("ParameterValueAssignmentSyntax&") = nullptr);
    SyntaxFactory.def("classPropertyDeclaration",&SyntaxFactory::classPropertyDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("const") = nullptr ,py::arg("MemberSyntax&") = nullptr);
    SyntaxFactory.def("classSpecifier",&SyntaxFactory::classSpecifier ,py::arg("colon") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("clockingDeclaration",&SyntaxFactory::clockingDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("EventExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("clockingDirection",&SyntaxFactory::clockingDirection ,py::arg("input") = Token() ,py::arg("ClockingSkewSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("ClockingSkewSyntax*") = nullptr);
    SyntaxFactory.def("clockingItem",&SyntaxFactory::clockingItem ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("ClockingDirectionSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("clockingPropertyExpr",&SyntaxFactory::clockingPropertyExpr ,py::arg("event") = nullptr ,py::arg("PropertyExprSyntax*") = nullptr);
    SyntaxFactory.def("clockingSequenceExpr",&SyntaxFactory::clockingSequenceExpr ,py::arg("event") = nullptr ,py::arg("SequenceExprSyntax&") = nullptr);
    SyntaxFactory.def("clockingSkew",&SyntaxFactory::clockingSkew ,py::arg("edge") = Token() ,py::arg("TimingControlSyntax*") = nullptr);
    SyntaxFactory.def("colonExpressionClause",&SyntaxFactory::colonExpressionClause ,py::arg("colon") = Token() ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("compilationUnit",&SyntaxFactory::compilationUnit ,py::arg("SyntaxList<MemberSyntax>&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("concatenationExpression",&SyntaxFactory::concatenationExpression ,py::arg("openBrace") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("concurrentAssertionMember",&SyntaxFactory::concurrentAssertionMember ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("ConcurrentAssertionStatementSyntax&") = nullptr);
    SyntaxFactory.def("concurrentAssertionStatement",&SyntaxFactory::concurrentAssertionStatement ,py::arg("kind") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("PropertySpecSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ActionBlockSyntax&") = nullptr);
    SyntaxFactory.def("conditionalBranchDirective",&SyntaxFactory::conditionalBranchDirective ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr ,py::arg("ConditionalDirectiveExpressionSyntax&") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("conditionalConstraint",&SyntaxFactory::conditionalConstraint ,py::arg("ifKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ConstraintItemSyntax&") = nullptr ,py::arg("ElseConstraintClauseSyntax*") = nullptr);
    SyntaxFactory.def("conditionalExpression",&SyntaxFactory::conditionalExpression ,py::arg("predicate") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("conditionalPathDeclaration",&SyntaxFactory::conditionalPathDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("PathDeclarationSyntax&") = nullptr);
    SyntaxFactory.def("conditionalPattern",&SyntaxFactory::conditionalPattern ,py::arg("expr") = nullptr ,py::arg("MatchesClauseSyntax*") = nullptr);
    SyntaxFactory.def("conditionalPredicate",&SyntaxFactory::conditionalPredicate ,py::arg("SeparatedSyntaxList<ConditionalPatternSyntax>&") = nullptr);
    SyntaxFactory.def("conditionalPropertyExpr",&SyntaxFactory::conditionalPropertyExpr ,py::arg("ifKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr ,py::arg("ElsePropertyClauseSyntax*") = nullptr);
    SyntaxFactory.def("conditionalStatement",&SyntaxFactory::conditionalStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ConditionalPredicateSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr ,py::arg("ElseClauseSyntax*") = nullptr);
    SyntaxFactory.def("configCellIdentifier",&SyntaxFactory::configCellIdentifier ,py::arg("library") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("configDeclaration",&SyntaxFactory::configDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("configInstanceIdentifier",&SyntaxFactory::configInstanceIdentifier ,py::arg("dot") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("configLiblist",&SyntaxFactory::configLiblist ,py::arg("liblist") = Token() ,py::arg("const") = nullptr);
    SyntaxFactory.def("configUseClause",&SyntaxFactory::configUseClause ,py::arg("use") = Token() ,py::arg("ConfigCellIdentifierSyntax*") = nullptr ,py::arg("ParameterValueAssignmentSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("constraintBlock",&SyntaxFactory::constraintBlock ,py::arg("openBrace") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("constraintDeclaration",&SyntaxFactory::constraintDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("NameSyntax&") = nullptr ,py::arg("ConstraintBlockSyntax&") = nullptr);
    SyntaxFactory.def("constraintPrototype",&SyntaxFactory::constraintPrototype ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("NameSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("continuousAssign",&SyntaxFactory::continuousAssign ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("DriveStrengthSyntax*") = nullptr ,py::arg("TimingControlSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("copyClassExpression",&SyntaxFactory::copyClassExpression ,py::arg("scopedNew") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("coverCross",&SyntaxFactory::coverCross ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("CoverageIffClauseSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("coverageBinsArraySize",&SyntaxFactory::coverageBinsArraySize ,py::arg("openBracket") = Token() ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("coverageBins",&SyntaxFactory::coverageBins ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("CoverageBinsArraySizeSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("CoverageBinInitializerSyntax&") = nullptr ,py::arg("CoverageIffClauseSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("coverageIffClause",&SyntaxFactory::coverageIffClause ,py::arg("iff") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("coverageOption",&SyntaxFactory::coverageOption ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("covergroupDeclaration",&SyntaxFactory::covergroupDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("FunctionPortListSyntax*") = nullptr ,py::arg("SyntaxNode*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("coverpoint",&SyntaxFactory::coverpoint ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("CoverageIffClauseSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("dPIExport",&SyntaxFactory::dPIExport ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("dPIImport",&SyntaxFactory::dPIImport ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("FunctionPrototypeSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("dataDeclaration",&SyntaxFactory::dataDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("const") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("declarator",&SyntaxFactory::declarator ,py::arg("name") = Token() ,py::arg("const") = nullptr ,py::arg("EqualsValueClauseSyntax*") = nullptr);
    SyntaxFactory.def("defParamAssignment",&SyntaxFactory::defParamAssignment ,py::arg("name") = nullptr ,py::arg("EqualsValueClauseSyntax&") = nullptr);
    SyntaxFactory.def("defParam",&SyntaxFactory::defParam ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultCaseItem",&SyntaxFactory::defaultCaseItem ,py::arg("defaultKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("SyntaxNode&") = nullptr);
    SyntaxFactory.def("defaultClockingReference",&SyntaxFactory::defaultClockingReference ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultConfigRule",&SyntaxFactory::defaultConfigRule ,py::arg("defaultKeyword") = Token() ,py::arg("ConfigLiblistSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultCoverageBinInitializer",&SyntaxFactory::defaultCoverageBinInitializer ,py::arg("defaultKeyword") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultDecayTimeDirective",&SyntaxFactory::defaultDecayTimeDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultDisableDeclaration",&SyntaxFactory::defaultDisableDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultDistItem",&SyntaxFactory::defaultDistItem ,py::arg("defaultKeyword") = Token() ,py::arg("DistWeightSyntax*") = nullptr);
    SyntaxFactory.def("defaultExtendsClauseArg",&SyntaxFactory::defaultExtendsClauseArg ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultFunctionPort",&SyntaxFactory::defaultFunctionPort ,py::arg("keyword") = Token());
    SyntaxFactory.def("defaultNetTypeDirective",&SyntaxFactory::defaultNetTypeDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultPropertyCaseItem",&SyntaxFactory::defaultPropertyCaseItem ,py::arg("defaultKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultRsCaseItem",&SyntaxFactory::defaultRsCaseItem ,py::arg("defaultKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("RsProdItemSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultSkewItem",&SyntaxFactory::defaultSkewItem ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ClockingDirectionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defaultTriregStrengthDirective",&SyntaxFactory::defaultTriregStrengthDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("deferredAssertion",&SyntaxFactory::deferredAssertion ,py::arg("hash") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("defineDirective",&SyntaxFactory::defineDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr ,py::arg("MacroFormalArgumentListSyntax*") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("delay3",&SyntaxFactory::delay3 ,py::arg("hash") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("delay",&SyntaxFactory::delay ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("delayedSequenceElement",&SyntaxFactory::delayedSequenceElement ,py::arg("doubleHash") = Token() ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("SelectorSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("SequenceExprSyntax&") = nullptr);
    SyntaxFactory.def("delayedSequenceExpr",&SyntaxFactory::delayedSequenceExpr ,py::arg("first") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("disableConstraint",&SyntaxFactory::disableConstraint ,py::arg("disable") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("disableForkStatement",&SyntaxFactory::disableForkStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("disableIff",&SyntaxFactory::disableIff ,py::arg("disable") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("disableStatement",&SyntaxFactory::disableStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NameSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("distConstraintList",&SyntaxFactory::distConstraintList ,py::arg("dist") = Token() ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("distItem",&SyntaxFactory::distItem ,py::arg("range") = nullptr ,py::arg("DistWeightSyntax*") = nullptr);
    SyntaxFactory.def("distWeight",&SyntaxFactory::distWeight ,py::arg("op") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("dividerClause",&SyntaxFactory::dividerClause ,py::arg("divide") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("doWhileStatement",&SyntaxFactory::doWhileStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("dotMemberClause",&SyntaxFactory::dotMemberClause ,py::arg("dot") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("driveStrength",&SyntaxFactory::driveStrength ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("edgeControlSpecifier",&SyntaxFactory::edgeControlSpecifier ,py::arg("openBracket") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("edgeDescriptor",&SyntaxFactory::edgeDescriptor ,py::arg("t1") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("edgeSensitivePathSuffix",&SyntaxFactory::edgeSensitivePathSuffix ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("elabSystemTask",&SyntaxFactory::elabSystemTask ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ArgumentListSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("elementSelectExpression",&SyntaxFactory::elementSelectExpression ,py::arg("left") = nullptr ,py::arg("ElementSelectSyntax&") = nullptr);
    SyntaxFactory.def("elementSelect",&SyntaxFactory::elementSelect ,py::arg("openBracket") = Token() ,py::arg("SelectorSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("elseClause",&SyntaxFactory::elseClause ,py::arg("elseKeyword") = Token() ,py::arg("SyntaxNode&") = nullptr);
    SyntaxFactory.def("elseConstraintClause",&SyntaxFactory::elseConstraintClause ,py::arg("elseKeyword") = Token() ,py::arg("ConstraintItemSyntax&") = nullptr);
    SyntaxFactory.def("elsePropertyClause",&SyntaxFactory::elsePropertyClause ,py::arg("elseKeyword") = Token() ,py::arg("PropertyExprSyntax&") = nullptr);
    SyntaxFactory.def("emptyArgument",&SyntaxFactory::emptyArgument ,py::arg("placeholder") = Token());
    SyntaxFactory.def("emptyIdentifierName",&SyntaxFactory::emptyIdentifierName ,py::arg("placeholder") = Token());
    SyntaxFactory.def("emptyMember",&SyntaxFactory::emptyMember ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("emptyNonAnsiPort",&SyntaxFactory::emptyNonAnsiPort ,py::arg("placeholder") = Token());
    SyntaxFactory.def("emptyPortConnection",&SyntaxFactory::emptyPortConnection ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("emptyQueueExpression",&SyntaxFactory::emptyQueueExpression ,py::arg("openBrace") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("emptyStatement",&SyntaxFactory::emptyStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("emptyTimingCheckArg",&SyntaxFactory::emptyTimingCheckArg ,py::arg("placeholder") = Token());
    SyntaxFactory.def("enumType",&SyntaxFactory::enumType ,py::arg("keyword") = Token() ,py::arg("DataTypeSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("equalsAssertionArgClause",&SyntaxFactory::equalsAssertionArgClause ,py::arg("equals") = Token() ,py::arg("PropertyExprSyntax&") = nullptr);
    SyntaxFactory.def("equalsTypeClause",&SyntaxFactory::equalsTypeClause ,py::arg("equals") = Token() ,py::arg("DataTypeSyntax&") = nullptr);
    SyntaxFactory.def("equalsValueClause",&SyntaxFactory::equalsValueClause ,py::arg("equals") = Token() ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("eventControl",&SyntaxFactory::eventControl ,py::arg("at") = Token() ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("eventControlWithExpression",&SyntaxFactory::eventControlWithExpression ,py::arg("at") = Token() ,py::arg("EventExpressionSyntax&") = nullptr);
    SyntaxFactory.def("eventTriggerStatement",&SyntaxFactory::eventTriggerStatement ,py::arg("kind") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("TimingControlSyntax*") = nullptr ,py::arg("NameSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("explicitAnsiPort",&SyntaxFactory::explicitAnsiPort ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("explicitNonAnsiPort",&SyntaxFactory::explicitNonAnsiPort ,py::arg("dot") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("PortExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("expressionConstraint",&SyntaxFactory::expressionConstraint ,py::arg("soft") = Token() ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("expressionCoverageBinInitializer",&SyntaxFactory::expressionCoverageBinInitializer ,py::arg("expr") = nullptr);
    SyntaxFactory.def("expressionOrDist",&SyntaxFactory::expressionOrDist ,py::arg("expr") = nullptr ,py::arg("DistConstraintListSyntax&") = nullptr);
    SyntaxFactory.def("expressionPattern",&SyntaxFactory::expressionPattern ,py::arg("expr") = nullptr);
    SyntaxFactory.def("expressionStatement",&SyntaxFactory::expressionStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("expressionTimingCheckArg",&SyntaxFactory::expressionTimingCheckArg ,py::arg("expr") = nullptr);
    SyntaxFactory.def("extendsClause",&SyntaxFactory::extendsClause ,py::arg("keyword") = Token() ,py::arg("NameSyntax&") = nullptr ,py::arg("ArgumentListSyntax*") = nullptr ,py::arg("DefaultExtendsClauseArgSyntax*") = nullptr);
    SyntaxFactory.def("externInterfaceMethod",&SyntaxFactory::externInterfaceMethod ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("FunctionPrototypeSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("externModuleDecl",&SyntaxFactory::externModuleDecl ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("ModuleHeaderSyntax&") = nullptr);
    SyntaxFactory.def("externUdpDecl",&SyntaxFactory::externUdpDecl ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("UdpPortListSyntax&") = nullptr);
    SyntaxFactory.def("filePathSpec",&SyntaxFactory::filePathSpec ,py::arg("path") = Token());
    SyntaxFactory.def("firstMatchSequenceExpr",&SyntaxFactory::firstMatchSequenceExpr ,py::arg("first_match") = Token() ,py::arg("Token") = nullptr ,py::arg("SequenceExprSyntax&") = nullptr ,py::arg("SequenceMatchListSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("forLoopStatement",&SyntaxFactory::forLoopStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("forVariableDeclaration",&SyntaxFactory::forVariableDeclaration ,py::arg("varKeyword") = Token() ,py::arg("DataTypeSyntax*") = nullptr ,py::arg("DeclaratorSyntax&") = nullptr);
    SyntaxFactory.def("foreachLoopList",&SyntaxFactory::foreachLoopList ,py::arg("openParen") = Token() ,py::arg("NameSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("foreachLoopStatement",&SyntaxFactory::foreachLoopStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("ForeachLoopListSyntax&") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("foreverStatement",&SyntaxFactory::foreverStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("forwardTypeRestriction",&SyntaxFactory::forwardTypeRestriction ,py::arg("keyword1") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("forwardTypedefDeclaration",&SyntaxFactory::forwardTypedefDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ForwardTypeRestrictionSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("functionDeclaration",&SyntaxFactory::functionDeclaration ,py::arg("kind") = nullptr ,py::arg("const") = nullptr ,py::arg("FunctionPrototypeSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("functionPortList",&SyntaxFactory::functionPortList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("functionPort",&SyntaxFactory::functionPort ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax*") = nullptr ,py::arg("DeclaratorSyntax&") = nullptr);
    SyntaxFactory.def("functionPrototype",&SyntaxFactory::functionPrototype ,py::arg("keyword") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("NameSyntax&") = nullptr ,py::arg("FunctionPortListSyntax*") = nullptr);
    SyntaxFactory.def("generateBlock",&SyntaxFactory::generateBlock ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("generateRegion",&SyntaxFactory::generateRegion ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("genvarDeclaration",&SyntaxFactory::genvarDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("hierarchicalInstance",&SyntaxFactory::hierarchicalInstance ,py::arg("decl") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("hierarchyInstantiation",&SyntaxFactory::hierarchyInstantiation ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ParameterValueAssignmentSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("idWithExprCoverageBinInitializer",&SyntaxFactory::idWithExprCoverageBinInitializer ,py::arg("id") = Token() ,py::arg("WithClauseSyntax&") = nullptr);
    SyntaxFactory.def("identifierName",&SyntaxFactory::identifierName ,py::arg("identifier") = Token());
    SyntaxFactory.def("identifierSelectName",&SyntaxFactory::identifierSelectName ,py::arg("identifier") = Token() ,py::arg("const") = nullptr);
    SyntaxFactory.def("ifGenerate",&SyntaxFactory::ifGenerate ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("MemberSyntax&") = nullptr ,py::arg("ElseClauseSyntax*") = nullptr);
    SyntaxFactory.def("ifNonePathDeclaration",&SyntaxFactory::ifNonePathDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("PathDeclarationSyntax&") = nullptr);
    SyntaxFactory.def("iffEventClause",&SyntaxFactory::iffEventClause ,py::arg("iff") = Token() ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("immediateAssertionMember",&SyntaxFactory::immediateAssertionMember ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("ImmediateAssertionStatementSyntax&") = nullptr);
    SyntaxFactory.def("immediateAssertionStatement",&SyntaxFactory::immediateAssertionStatement ,py::arg("kind") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("DeferredAssertionSyntax*") = nullptr ,py::arg("ParenthesizedExpressionSyntax&") = nullptr ,py::arg("ActionBlockSyntax&") = nullptr);
    SyntaxFactory.def("implementsClause",&SyntaxFactory::implementsClause ,py::arg("keyword") = Token() ,py::arg("const") = nullptr);
    SyntaxFactory.def("implicationConstraint",&SyntaxFactory::implicationConstraint ,py::arg("left") = nullptr ,py::arg("Token") = nullptr ,py::arg("ConstraintItemSyntax&") = nullptr);
    SyntaxFactory.def("implicitAnsiPort",&SyntaxFactory::implicitAnsiPort ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("PortHeaderSyntax&") = nullptr ,py::arg("DeclaratorSyntax&") = nullptr);
    SyntaxFactory.def("implicitEventControl",&SyntaxFactory::implicitEventControl ,py::arg("at") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("implicitNonAnsiPort",&SyntaxFactory::implicitNonAnsiPort ,py::arg("expr") = nullptr);
    SyntaxFactory.def("implicitType",&SyntaxFactory::implicitType ,py::arg("signing") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("includeDirective",&SyntaxFactory::includeDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("insideExpression",&SyntaxFactory::insideExpression ,py::arg("expr") = nullptr ,py::arg("Token") = nullptr ,py::arg("RangeListSyntax&") = nullptr);
    SyntaxFactory.def("instanceConfigRule",&SyntaxFactory::instanceConfigRule ,py::arg("instance") = Token() ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("ConfigRuleClauseSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("instanceName",&SyntaxFactory::instanceName ,py::arg("name") = Token() ,py::arg("const") = nullptr);
    SyntaxFactory.def("integerType",&SyntaxFactory::integerType ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("integerVectorExpression",&SyntaxFactory::integerVectorExpression ,py::arg("size") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("interfacePortHeader",&SyntaxFactory::interfacePortHeader ,py::arg("nameOrKeyword") = Token() ,py::arg("DotMemberClauseSyntax*") = nullptr);
    SyntaxFactory.def("intersectClause",&SyntaxFactory::intersectClause ,py::arg("intersect") = Token() ,py::arg("RangeListSyntax&") = nullptr);
    SyntaxFactory.def("invocationExpression",&SyntaxFactory::invocationExpression ,py::arg("left") = nullptr ,py::arg("const") = nullptr ,py::arg("ArgumentListSyntax*") = nullptr);
    SyntaxFactory.def("jumpStatement",&SyntaxFactory::jumpStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("keywordName",&SyntaxFactory::keywordName ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("keywordType",&SyntaxFactory::keywordType ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("letDeclaration",&SyntaxFactory::letDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("AssertionItemPortListSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("libraryDeclaration",&SyntaxFactory::libraryDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("LibraryIncDirClauseSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("libraryIncDirClause",&SyntaxFactory::libraryIncDirClause ,py::arg("minus") = Token() ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("libraryIncludeStatement",&SyntaxFactory::libraryIncludeStatement ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("FilePathSpecSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("libraryMap",&SyntaxFactory::libraryMap ,py::arg("SyntaxList<MemberSyntax>&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("lineDirective",&SyntaxFactory::lineDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("literalExpression",&SyntaxFactory::literalExpression ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("localVariableDeclaration",&SyntaxFactory::localVariableDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("loopConstraint",&SyntaxFactory::loopConstraint ,py::arg("foreachKeyword") = Token() ,py::arg("ForeachLoopListSyntax&") = nullptr ,py::arg("ConstraintItemSyntax&") = nullptr);
    SyntaxFactory.def("loopGenerate",&SyntaxFactory::loopGenerate ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("MemberSyntax&") = nullptr);
    SyntaxFactory.def("loopStatement",&SyntaxFactory::loopStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("macroActualArgumentList",&SyntaxFactory::macroActualArgumentList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("macroActualArgument",&SyntaxFactory::macroActualArgument ,py::arg("TokenList&") = nullptr);
    SyntaxFactory.def("macroArgumentDefault",&SyntaxFactory::macroArgumentDefault ,py::arg("equals") = Token() ,py::arg("const") = nullptr);
    SyntaxFactory.def("macroFormalArgumentList",&SyntaxFactory::macroFormalArgumentList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("macroFormalArgument",&SyntaxFactory::macroFormalArgument ,py::arg("name") = Token() ,py::arg("MacroArgumentDefaultSyntax*") = nullptr);
    SyntaxFactory.def("macroUsage",&SyntaxFactory::macroUsage ,py::arg("directive") = Token() ,py::arg("MacroActualArgumentListSyntax*") = nullptr);
    SyntaxFactory.def("matchesClause",&SyntaxFactory::matchesClause ,py::arg("matchesKeyword") = Token() ,py::arg("PatternSyntax&") = nullptr);
    SyntaxFactory.def("memberAccessExpression",&SyntaxFactory::memberAccessExpression ,py::arg("left") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("minTypMaxExpression",&SyntaxFactory::minTypMaxExpression ,py::arg("min") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("modportClockingPort",&SyntaxFactory::modportClockingPort ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("modportDeclaration",&SyntaxFactory::modportDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("modportExplicitPort",&SyntaxFactory::modportExplicitPort ,py::arg("dot") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("modportItem",&SyntaxFactory::modportItem ,py::arg("name") = Token() ,py::arg("AnsiPortListSyntax&") = nullptr);
    SyntaxFactory.def("modportNamedPort",&SyntaxFactory::modportNamedPort ,py::arg("name") = Token());
    SyntaxFactory.def("modportSimplePortList",&SyntaxFactory::modportSimplePortList ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("modportSubroutinePortList",&SyntaxFactory::modportSubroutinePortList ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("modportSubroutinePort",&SyntaxFactory::modportSubroutinePort ,py::arg("prototype") = nullptr);
    SyntaxFactory.def("moduleDeclaration",&SyntaxFactory::moduleDeclaration ,py::arg("kind") = nullptr ,py::arg("const") = nullptr ,py::arg("ModuleHeaderSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("moduleHeader",&SyntaxFactory::moduleHeader ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("ParameterPortListSyntax*") = nullptr ,py::arg("PortListSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("multipleConcatenationExpression",&SyntaxFactory::multipleConcatenationExpression ,py::arg("openBrace") = Token() ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("ConcatenationExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("nameValuePragmaExpression",&SyntaxFactory::nameValuePragmaExpression ,py::arg("name") = Token() ,py::arg("Token") = nullptr ,py::arg("PragmaExpressionSyntax&") = nullptr);
    SyntaxFactory.def("namedArgument",&SyntaxFactory::namedArgument ,py::arg("dot") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("PropertyExprSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("namedBlockClause",&SyntaxFactory::namedBlockClause ,py::arg("colon") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("namedConditionalDirectiveExpression",&SyntaxFactory::namedConditionalDirectiveExpression ,py::arg("name") = Token());
    SyntaxFactory.def("namedLabel",&SyntaxFactory::namedLabel ,py::arg("name") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("namedParamAssignment",&SyntaxFactory::namedParamAssignment ,py::arg("dot") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("namedPortConnection",&SyntaxFactory::namedPortConnection ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("PropertyExprSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("namedStructurePatternMember",&SyntaxFactory::namedStructurePatternMember ,py::arg("name") = Token() ,py::arg("Token") = nullptr ,py::arg("PatternSyntax&") = nullptr);
    SyntaxFactory.def("namedType",&SyntaxFactory::namedType ,py::arg("name") = nullptr);
    SyntaxFactory.def("netAlias",&SyntaxFactory::netAlias ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("netDeclaration",&SyntaxFactory::netDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("NetStrengthSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("TimingControlSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("netPortHeader",&SyntaxFactory::netPortHeader ,py::arg("direction") = Token() ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr);
    SyntaxFactory.def("netTypeDeclaration",&SyntaxFactory::netTypeDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("WithFunctionClauseSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("newArrayExpression",&SyntaxFactory::newArrayExpression ,py::arg("newKeyword") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ParenthesizedExpressionSyntax*") = nullptr);
    SyntaxFactory.def("newClassExpression",&SyntaxFactory::newClassExpression ,py::arg("scopedNew") = nullptr ,py::arg("ArgumentListSyntax*") = nullptr);
    SyntaxFactory.def("nonAnsiPortList",&SyntaxFactory::nonAnsiPortList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("nonAnsiUdpPortList",&SyntaxFactory::nonAnsiUdpPortList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("numberPragmaExpression",&SyntaxFactory::numberPragmaExpression ,py::arg("size") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("oneStepDelay",&SyntaxFactory::oneStepDelay ,py::arg("hash") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("orderedArgument",&SyntaxFactory::orderedArgument ,py::arg("expr") = nullptr);
    SyntaxFactory.def("orderedParamAssignment",&SyntaxFactory::orderedParamAssignment ,py::arg("expr") = nullptr);
    SyntaxFactory.def("orderedPortConnection",&SyntaxFactory::orderedPortConnection ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr);
    SyntaxFactory.def("orderedStructurePatternMember",&SyntaxFactory::orderedStructurePatternMember ,py::arg("pattern") = nullptr);
    SyntaxFactory.def("packageExportAllDeclaration",&SyntaxFactory::packageExportAllDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("packageExportDeclaration",&SyntaxFactory::packageExportDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("packageImportDeclaration",&SyntaxFactory::packageImportDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("packageImportItem",&SyntaxFactory::packageImportItem ,py::arg("package") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parameterDeclarationStatement",&SyntaxFactory::parameterDeclarationStatement ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("ParameterDeclarationBaseSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parameterDeclaration",&SyntaxFactory::parameterDeclaration ,py::arg("keyword") = Token() ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("parameterPortList",&SyntaxFactory::parameterPortList ,py::arg("hash") = Token() ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parameterValueAssignment",&SyntaxFactory::parameterValueAssignment ,py::arg("hash") = Token() ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenExpressionList",&SyntaxFactory::parenExpressionList ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenPragmaExpression",&SyntaxFactory::parenPragmaExpression ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenthesizedBinsSelectExpr",&SyntaxFactory::parenthesizedBinsSelectExpr ,py::arg("openParen") = Token() ,py::arg("BinsSelectExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenthesizedConditionalDirectiveExpression",&SyntaxFactory::parenthesizedConditionalDirectiveExpression ,py::arg("openParen") = Token() ,py::arg("ConditionalDirectiveExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenthesizedEventExpression",&SyntaxFactory::parenthesizedEventExpression ,py::arg("openParen") = Token() ,py::arg("EventExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenthesizedExpression",&SyntaxFactory::parenthesizedExpression ,py::arg("openParen") = Token() ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenthesizedPattern",&SyntaxFactory::parenthesizedPattern ,py::arg("openParen") = Token() ,py::arg("PatternSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenthesizedPropertyExpr",&SyntaxFactory::parenthesizedPropertyExpr ,py::arg("openParen") = Token() ,py::arg("PropertyExprSyntax&") = nullptr ,py::arg("SequenceMatchListSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("parenthesizedSequenceExpr",&SyntaxFactory::parenthesizedSequenceExpr ,py::arg("openParen") = Token() ,py::arg("SequenceExprSyntax&") = nullptr ,py::arg("SequenceMatchListSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("SequenceRepetitionSyntax*") = nullptr);
    SyntaxFactory.def("pathDeclaration",&SyntaxFactory::pathDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("PathDescriptionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("pathDescription",&SyntaxFactory::pathDescription ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("PathSuffixSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("patternCaseItem",&SyntaxFactory::patternCaseItem ,py::arg("pattern") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("portConcatenation",&SyntaxFactory::portConcatenation ,py::arg("openBrace") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("portDeclaration",&SyntaxFactory::portDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("PortHeaderSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("portReference",&SyntaxFactory::portReference ,py::arg("name") = Token() ,py::arg("ElementSelectSyntax*") = nullptr);
    SyntaxFactory.def("postfixUnaryExpression",&SyntaxFactory::postfixUnaryExpression ,py::arg("kind") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("pragmaDirective",&SyntaxFactory::pragmaDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("prefixUnaryExpression",&SyntaxFactory::prefixUnaryExpression ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("primaryBlockEventExpression",&SyntaxFactory::primaryBlockEventExpression ,py::arg("keyword") = Token() ,py::arg("NameSyntax&") = nullptr);
    SyntaxFactory.def("primitiveInstantiation",&SyntaxFactory::primitiveInstantiation ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("NetStrengthSyntax*") = nullptr ,py::arg("TimingControlSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("proceduralAssignStatement",&SyntaxFactory::proceduralAssignStatement ,py::arg("kind") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("proceduralBlock",&SyntaxFactory::proceduralBlock ,py::arg("kind") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("proceduralDeassignStatement",&SyntaxFactory::proceduralDeassignStatement ,py::arg("kind") = nullptr ,py::arg("NamedLabelSyntax*") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("production",&SyntaxFactory::production ,py::arg("dataType") = nullptr ,py::arg("Token") = nullptr ,py::arg("FunctionPortListSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("propertyDeclaration",&SyntaxFactory::propertyDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("AssertionItemPortListSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("PropertySpecSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("propertySpec",&SyntaxFactory::propertySpec ,py::arg("clocking") = nullptr ,py::arg("DisableIffSyntax*") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr);
    SyntaxFactory.def("pullStrength",&SyntaxFactory::pullStrength ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("pulseStyleDeclaration",&SyntaxFactory::pulseStyleDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("queueDimensionSpecifier",&SyntaxFactory::queueDimensionSpecifier ,py::arg("dollar") = Token() ,py::arg("ColonExpressionClauseSyntax*") = nullptr);
    SyntaxFactory.def("randCaseItem",&SyntaxFactory::randCaseItem ,py::arg("expr") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("randCaseStatement",&SyntaxFactory::randCaseStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("randJoinClause",&SyntaxFactory::randJoinClause ,py::arg("rand") = Token() ,py::arg("Token") = nullptr ,py::arg("ParenthesizedExpressionSyntax*") = nullptr);
    SyntaxFactory.def("randSequenceStatement",&SyntaxFactory::randSequenceStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("rangeCoverageBinInitializer",&SyntaxFactory::rangeCoverageBinInitializer ,py::arg("ranges") = nullptr ,py::arg("WithClauseSyntax*") = nullptr);
    SyntaxFactory.def("rangeDimensionSpecifier",&SyntaxFactory::rangeDimensionSpecifier ,py::arg("selector") = nullptr);
    SyntaxFactory.def("rangeList",&SyntaxFactory::rangeList ,py::arg("openBrace") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("rangeSelect",&SyntaxFactory::rangeSelect ,py::arg("kind") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("repeatedEventControl",&SyntaxFactory::repeatedEventControl ,py::arg("repeat") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("TimingControlSyntax*") = nullptr);
    SyntaxFactory.def("replicatedAssignmentPattern",&SyntaxFactory::replicatedAssignmentPattern ,py::arg("openBrace") = Token() ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("returnStatement",&SyntaxFactory::returnStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("rsCase",&SyntaxFactory::rsCase ,py::arg("keyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("rsCodeBlock",&SyntaxFactory::rsCodeBlock ,py::arg("openBrace") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("rsElseClause",&SyntaxFactory::rsElseClause ,py::arg("keyword") = Token() ,py::arg("RsProdItemSyntax&") = nullptr);
    SyntaxFactory.def("rsIfElse",&SyntaxFactory::rsIfElse ,py::arg("keyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("RsProdItemSyntax&") = nullptr ,py::arg("RsElseClauseSyntax*") = nullptr);
    SyntaxFactory.def("rsProdItem",&SyntaxFactory::rsProdItem ,py::arg("name") = Token() ,py::arg("ArgumentListSyntax*") = nullptr);
    SyntaxFactory.def("rsRepeat",&SyntaxFactory::rsRepeat ,py::arg("keyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("RsProdItemSyntax&") = nullptr);
    SyntaxFactory.def("rsRule",&SyntaxFactory::rsRule ,py::arg("randJoin") = nullptr ,py::arg("const") = nullptr ,py::arg("RsWeightClauseSyntax*") = nullptr);
    SyntaxFactory.def("rsWeightClause",&SyntaxFactory::rsWeightClause ,py::arg("colonEqual") = Token() ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("RsProdSyntax*") = nullptr);
    SyntaxFactory.def("scopedName",&SyntaxFactory::scopedName ,py::arg("left") = nullptr ,py::arg("Token") = nullptr ,py::arg("NameSyntax&") = nullptr);
    SyntaxFactory.def("sequenceDeclaration",&SyntaxFactory::sequenceDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("AssertionItemPortListSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("SequenceExprSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("sequenceMatchList",&SyntaxFactory::sequenceMatchList ,py::arg("comma") = Token() ,py::arg("const") = nullptr);
    SyntaxFactory.def("sequenceRepetition",&SyntaxFactory::sequenceRepetition ,py::arg("openBracket") = Token() ,py::arg("Token") = nullptr ,py::arg("SelectorSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("signalEventExpression",&SyntaxFactory::signalEventExpression ,py::arg("edge") = Token() ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("IffEventClauseSyntax*") = nullptr);
    SyntaxFactory.def("signedCastExpression",&SyntaxFactory::signedCastExpression ,py::arg("signing") = Token() ,py::arg("Token") = nullptr ,py::arg("ParenthesizedExpressionSyntax&") = nullptr);
    SyntaxFactory.def("simpleAssignmentPattern",&SyntaxFactory::simpleAssignmentPattern ,py::arg("openBrace") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("simpleBinsSelectExpr",&SyntaxFactory::simpleBinsSelectExpr ,py::arg("expr") = nullptr ,py::arg("MatchesClauseSyntax*") = nullptr);
    SyntaxFactory.def("simpleDirective",&SyntaxFactory::simpleDirective ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("simplePathSuffix",&SyntaxFactory::simplePathSuffix ,py::arg("SeparatedSyntaxList<NameSyntax>&") = nullptr);
    SyntaxFactory.def("simplePragmaExpression",&SyntaxFactory::simplePragmaExpression ,py::arg("value") = Token());
    SyntaxFactory.def("simplePropertyExpr",&SyntaxFactory::simplePropertyExpr ,py::arg("expr") = nullptr);
    SyntaxFactory.def("simpleSequenceExpr",&SyntaxFactory::simpleSequenceExpr ,py::arg("expr") = nullptr ,py::arg("SequenceRepetitionSyntax*") = nullptr);
    SyntaxFactory.def("solveBeforeConstraint",&SyntaxFactory::solveBeforeConstraint ,py::arg("solve") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("specifyBlock",&SyntaxFactory::specifyBlock ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("specparamDeclaration",&SyntaxFactory::specparamDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ImplicitTypeSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("specparamDeclarator",&SyntaxFactory::specparamDeclarator ,py::arg("name") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("standardCaseItem",&SyntaxFactory::standardCaseItem ,py::arg("SeparatedSyntaxList<ExpressionSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("SyntaxNode&") = nullptr);
    SyntaxFactory.def("standardPropertyCaseItem",&SyntaxFactory::standardPropertyCaseItem ,py::arg("SeparatedSyntaxList<ExpressionSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("standardRsCaseItem",&SyntaxFactory::standardRsCaseItem ,py::arg("SeparatedSyntaxList<ExpressionSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("RsProdItemSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("streamExpression",&SyntaxFactory::streamExpression ,py::arg("expression") = nullptr ,py::arg("StreamExpressionWithRangeSyntax*") = nullptr);
    SyntaxFactory.def("streamExpressionWithRange",&SyntaxFactory::streamExpressionWithRange ,py::arg("withKeyword") = Token() ,py::arg("ElementSelectSyntax&") = nullptr);
    SyntaxFactory.def("streamingConcatenationExpression",&SyntaxFactory::streamingConcatenationExpression ,py::arg("openBrace") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("strongWeakPropertyExpr",&SyntaxFactory::strongWeakPropertyExpr ,py::arg("keyword") = Token() ,py::arg("Token") = nullptr ,py::arg("SequenceExprSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("structUnionMember",&SyntaxFactory::structUnionMember ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("structUnionType",&SyntaxFactory::structUnionType ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("structurePattern",&SyntaxFactory::structurePattern ,py::arg("openBrace") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("structuredAssignmentPattern",&SyntaxFactory::structuredAssignmentPattern ,py::arg("openBrace") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("superNewDefaultedArgsExpression",&SyntaxFactory::superNewDefaultedArgsExpression ,py::arg("scopedNew") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("systemName",&SyntaxFactory::systemName ,py::arg("systemIdentifier") = Token());
    SyntaxFactory.def("systemTimingCheck",&SyntaxFactory::systemTimingCheck ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("taggedPattern",&SyntaxFactory::taggedPattern ,py::arg("tagged") = Token() ,py::arg("Token") = nullptr ,py::arg("PatternSyntax*") = nullptr);
    SyntaxFactory.def("taggedUnionExpression",&SyntaxFactory::taggedUnionExpression ,py::arg("tagged") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax*") = nullptr);
    SyntaxFactory.def("timeScaleDirective",&SyntaxFactory::timeScaleDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("timeUnitsDeclaration",&SyntaxFactory::timeUnitsDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("DividerClauseSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("timingCheckEventArg",&SyntaxFactory::timingCheckEventArg ,py::arg("edge") = Token() ,py::arg("EdgeControlSpecifierSyntax*") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("TimingCheckEventConditionSyntax*") = nullptr);
    SyntaxFactory.def("timingCheckEventCondition",&SyntaxFactory::timingCheckEventCondition ,py::arg("tripleAnd") = Token() ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("timingControlExpression",&SyntaxFactory::timingControlExpression ,py::arg("timing") = nullptr ,py::arg("ExpressionSyntax&") = nullptr);
    SyntaxFactory.def("timingControlStatement",&SyntaxFactory::timingControlStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("TimingControlSyntax&") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("transListCoverageBinInitializer",&SyntaxFactory::transListCoverageBinInitializer ,py::arg("SeparatedSyntaxList<TransSetSyntax>&") = nullptr);
    SyntaxFactory.def("transRange",&SyntaxFactory::transRange ,py::arg("SeparatedSyntaxList<ExpressionSyntax>&") = nullptr ,py::arg("TransRepeatRangeSyntax*") = nullptr);
    SyntaxFactory.def("transRepeatRange",&SyntaxFactory::transRepeatRange ,py::arg("openBracket") = Token() ,py::arg("Token") = nullptr ,py::arg("SelectorSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("transSet",&SyntaxFactory::transSet ,py::arg("openParen") = Token() ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("typeAssignment",&SyntaxFactory::typeAssignment ,py::arg("name") = Token() ,py::arg("EqualsTypeClauseSyntax*") = nullptr);
    SyntaxFactory.def("typeParameterDeclaration",&SyntaxFactory::typeParameterDeclaration ,py::arg("keyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ForwardTypeRestrictionSyntax*") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("typeReference",&SyntaxFactory::typeReference ,py::arg("typeKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("typedefDeclaration",&SyntaxFactory::typedefDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("udpBody",&SyntaxFactory::udpBody ,py::arg("SeparatedSyntaxList<UdpPortDeclSyntax>&") = nullptr ,py::arg("UdpInitialStmtSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("udpDeclaration",&SyntaxFactory::udpDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("UdpPortListSyntax&") = nullptr ,py::arg("UdpBodySyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("NamedBlockClauseSyntax*") = nullptr);
    SyntaxFactory.def("udpEdgeField",&SyntaxFactory::udpEdgeField ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("udpEntry",&SyntaxFactory::udpEntry ,py::arg("SyntaxList<UdpFieldBaseSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("UdpFieldBaseSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("UdpFieldBaseSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("udpInitialStmt",&SyntaxFactory::udpInitialStmt ,py::arg("initial") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("udpInputPortDecl",&SyntaxFactory::udpInputPortDecl ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("udpOutputPortDecl",&SyntaxFactory::udpOutputPortDecl ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("EqualsValueClauseSyntax*") = nullptr);
    SyntaxFactory.def("udpSimpleField",&SyntaxFactory::udpSimpleField ,py::arg("field") = Token());
    SyntaxFactory.def("unaryBinsSelectExpr",&SyntaxFactory::unaryBinsSelectExpr ,py::arg("op") = Token() ,py::arg("BinsSelectConditionExprSyntax&") = nullptr);
    SyntaxFactory.def("unaryConditionalDirectiveExpression",&SyntaxFactory::unaryConditionalDirectiveExpression ,py::arg("op") = Token() ,py::arg("ConditionalDirectiveExpressionSyntax&") = nullptr);
    SyntaxFactory.def("unaryPropertyExpr",&SyntaxFactory::unaryPropertyExpr ,py::arg("op") = Token() ,py::arg("PropertyExprSyntax&") = nullptr);
    SyntaxFactory.def("unarySelectPropertyExpr",&SyntaxFactory::unarySelectPropertyExpr ,py::arg("op") = Token() ,py::arg("Token") = nullptr ,py::arg("SelectorSyntax*") = nullptr ,py::arg("Token") = nullptr ,py::arg("PropertyExprSyntax&") = nullptr);
    SyntaxFactory.def("unconditionalBranchDirective",&SyntaxFactory::unconditionalBranchDirective ,py::arg("kind") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr);
    SyntaxFactory.def("unconnectedDriveDirective",&SyntaxFactory::unconnectedDriveDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("undefDirective",&SyntaxFactory::undefDirective ,py::arg("directive") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("uniquenessConstraint",&SyntaxFactory::uniquenessConstraint ,py::arg("unique") = Token() ,py::arg("RangeListSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("userDefinedNetDeclaration",&SyntaxFactory::userDefinedNetDeclaration ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("TimingControlSyntax&") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("valueRangeExpression",&SyntaxFactory::valueRangeExpression ,py::arg("openBracket") = Token() ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("variableDimension",&SyntaxFactory::variableDimension ,py::arg("openBracket") = Token() ,py::arg("DimensionSpecifierSyntax*") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("variablePattern",&SyntaxFactory::variablePattern ,py::arg("dot") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("variablePortHeader",&SyntaxFactory::variablePortHeader ,py::arg("constKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("DataTypeSyntax&") = nullptr);
    SyntaxFactory.def("virtualInterfaceType",&SyntaxFactory::virtualInterfaceType ,py::arg("virtualKeyword") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ParameterValueAssignmentSyntax*") = nullptr ,py::arg("DotMemberClauseSyntax*") = nullptr);
    SyntaxFactory.def("voidCastedCallStatement",&SyntaxFactory::voidCastedCallStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("waitForkStatement",&SyntaxFactory::waitForkStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("waitOrderStatement",&SyntaxFactory::waitOrderStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("ActionBlockSyntax&") = nullptr);
    SyntaxFactory.def("waitStatement",&SyntaxFactory::waitStatement ,py::arg("label") = nullptr ,py::arg("const") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr ,py::arg("StatementSyntax&") = nullptr);
    SyntaxFactory.def("wildcardDimensionSpecifier",&SyntaxFactory::wildcardDimensionSpecifier ,py::arg("star") = Token());
    SyntaxFactory.def("wildcardPattern",&SyntaxFactory::wildcardPattern ,py::arg("dot") = Token() ,py::arg("Token") = nullptr);
    SyntaxFactory.def("wildcardPortConnection",&SyntaxFactory::wildcardPortConnection ,py::arg("SyntaxList<AttributeInstanceSyntax>&") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("wildcardPortList",&SyntaxFactory::wildcardPortList ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("wildcardUdpPortList",&SyntaxFactory::wildcardUdpPortList ,py::arg("openParen") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("withClause",&SyntaxFactory::withClause ,py::arg("with") = Token() ,py::arg("Token") = nullptr ,py::arg("ExpressionSyntax&") = nullptr ,py::arg("Token") = nullptr);
    SyntaxFactory.def("withFunctionClause",&SyntaxFactory::withFunctionClause ,py::arg("with") = Token() ,py::arg("NameSyntax&") = nullptr);
    SyntaxFactory.def("withFunctionSample",&SyntaxFactory::withFunctionSample ,py::arg("with") = Token() ,py::arg("Token") = nullptr ,py::arg("Token") = nullptr ,py::arg("FunctionPortListSyntax*") = nullptr);
};