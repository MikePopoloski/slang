Expression final=false
empty

DataType base=Expression final=false
empty

// ----- ATTRIBUTES -----

EqualsValueClause kind=EqualsValueClause
token equals
Expression expr

AttributeSpec kind=AttributeSpec
token name
EqualsValueClause? value

AttributeInstance kind=AttributeInstance
token openParen
separated_list<AttributeSpec> specs
token closeParen

NamedLabel kind=NamedLabel
token name
token colon

Statement final=false
NamedLabel? label
list<AttributeInstance> attributes

Member final=false
list<AttributeInstance> attributes

// ----- ARGUMENTS -----

Argument final=false
empty

EmptyArgument base=Argument kind=EmptyArgument
token placeholder

OrderedArgument base=Argument kind=OrderedArgument
Expression expr

NamedArgument base=Argument kind=NamedArgument
token dot
token name
token openParen
Expression? expr
token closeParen

ArgumentList kind=ArgumentList
token openParen
separated_list<Argument> parameters
token closeParen

ParameterValueAssignment kind=ParameterValueAssignment
token hash
ArgumentList assignments

// ----- PATTERNS -----

Pattern final=false
empty

VariablePattern base=Pattern kind=VariablePattern
token dot
token variableName

WildcardPattern base=Pattern kind=WildcardPattern
token dotStar

ExpressionPattern base=Pattern kind=ExpressionPattern
Expression expr

TaggedPattern base=Pattern kind=TaggedPattern
token tagged
token memberName
Pattern? pattern

StructurePatternMember final=false
empty

OrderedStructurePatternMember base=StructurePatternMember kind=OrderedStructurePatternMember
Pattern pattern

NamedStructurePatternMember base=StructurePatternMember kind=NamedStructurePatternMember
token name
token colon
Pattern pattern

StructurePattern base=Pattern kind=StructurePattern
token openBrace
separated_list<StructurePatternMember> members
token closeBrace

MatchesClause kind=MatchesClause
token matchesKeyword
Pattern pattern

ConditionalPattern kind=ConditionalPattern
Expression expr
MatchesClause? matchesClause

ConditionalPredicate kind=ConditionalPredicate
separated_list<ConditionalPattern> conditions

AssignmentPattern final=false
empty

SimpleAssignmentPattern base=AssignmentPattern kind=SimpleAssignmentPattern
token openBrace
separated_list<Expression> items
token closeBrace

AssignmentPatternItem kind=AssignmentPatternItem
Expression key
token colon
Expression expr

StructuredAssignmentPattern base=AssignmentPattern kind=StructuredAssignmentPattern
token openBrace
separated_list<AssignmentPatternItem> items
token closeBrace

ReplicatedAssignmentPattern base=AssignmentPattern kind=ReplicatedAssignmentPattern
token openBrace
Expression countExpr
token innerOpenBrace
separated_list<Expression> items
token innerCloseBrace
token closeBrace

// ----- EXPRESSIONS -----

BadExpression base=Expression kind=BadExpression
Expression expr

PrimaryExpression base=Expression final=false
empty

PrefixUnaryExpression base=Expression
token operatorToken
list<AttributeInstance> attributes
Expression operand

kindmap<PrefixUnaryExpression>
UnaryPlusExpression UnaryMinusExpression UnaryBitwiseAndExpression
UnaryBitwiseNandExpression UnaryBitwiseOrExpression UnaryBitwiseNorExpression
UnaryBitwiseXorExpression UnaryBitwiseXnorExpression UnaryPreincrementExpression
UnaryPredecrementExpression UnaryLogicalNotExpression UnaryBitwiseNotExpression
UnarySequenceDelayExpression UnarySequenceEventExpression UnaryNotPropertyExpression
AcceptOnPropertyExpression RejectOnPropertyExpression SyncAcceptOnPropertyExpression
SyncRejectOnPropertyExpression NextTimePropertyExpression SNextTimePropertyExpression
AlwaysPropertyExpression SAlwaysPropertyExpression EventuallyPropertyExpression
SEventuallyPropertyExpression

PostfixUnaryExpression base=Expression
Expression operand
list<AttributeInstance> attributes
token operatorToken

kindmap<PostfixUnaryExpression>
PostincrementExpression PostdecrementExpression

BinaryExpression base=Expression
Expression left
token operatorToken
list<AttributeInstance> attributes
Expression right

kindmap<BinaryExpression>
AddExpression SubtractExpression MultiplyExpression DivideExpression PowerExpression
ModExpression EqualityExpression InequalityExpression CaseEqualityExpression
CaseInequalityExpression WildcardEqualityExpression WildcardInequalityExpression
LessThanExpression LessThanEqualExpression GreaterThanExpression GreaterThanEqualExpression
LogicalAndExpression LogicalOrExpression BinaryAndExpression BinaryOrExpression
BinaryXorExpression BinaryXnorExpression LogicalImplicationExpression
LogicalEquivalenceExpression LogicalShiftLeftExpression LogicalShiftRightExpression
ArithmeticShiftLeftExpression ArithmeticShiftRightExpression BinarySequenceDelayExpression
OrSequenceExpression AndSequenceExpression IntersectSequenceExpression
WithinSequenceExpression ThroughoutSequenceExpression IffPropertyExpression
UntilPropertyExpression SUntilPropertyExpression UntilWithPropertyExpression
SUntilWithPropertyExpression ImpliesPropertyExpression
OverlappedImplicationPropertyExpression NonOverlappedImplicationPropertyExpression
OverlappedFollowedByPropertyExpression NonOverlappedFollowedByPropertyExpression
AssignmentExpression AddAssignmentExpression SubtractAssignmentExpression
MultiplyAssignmentExpression DivideAssignmentExpression ModAssignmentExpression
AndAssignmentExpression OrAssignmentExpression XorAssignmentExpression
LogicalLeftShiftAssignmentExpression LogicalRightShiftAssignmentExpression
ArithmeticLeftShiftAssignmentExpression ArithmeticRightShiftAssignmentExpression
NonblockingAssignmentExpression

MinTypMaxExpression base=Expression kind=MinTypMaxExpression
Expression min
token colon1
Expression typ
token colon2
Expression max

TaggedUnionExpression base=Expression kind=TaggedUnionExpression
token tagged
token member
Expression? expr

OpenRangeExpression base=Expression kind=OpenRangeExpression
token openBracket
Expression left
token colon
Expression right
token closeBracket

OpenRangeList kind=OpenRangeList
token openBrace
separated_list<Expression> valueRanges
token closeBrace

InsideExpression base=Expression kind=InsideExpression
Expression expr
token inside
OpenRangeList ranges

ConditionalExpression base=Expression kind=ConditionalExpression
ConditionalPredicate predicate
token question
list<AttributeInstance> attributes
Expression left
token colon
Expression right

AssignmentPatternExpression base=PrimaryExpression kind=AssignmentPatternExpression
DataType? type
AssignmentPattern pattern

// ----- SELECTORS -----

Selector final=false
empty

BitSelect base=Selector kind=BitSelect
Expression expr

RangeSelect base=Selector
Expression left
token range
Expression right

kindmap<RangeSelect>
SimpleRangeSelect AscendingRangeSelect DescendingRangeSelect

ElementSelect kind=ElementSelect
token openBracket
Selector? selector
token closeBracket

// ----- NAMES -----

Name base=Expression final=false
empty

IdentifierName base=Name kind=IdentifierName
token identifier

SystemName base=Name kind=SystemName
token systemIdentifier

IdentifierSelectName base=Name kind=IdentifierSelectName
token identifier
list<ElementSelect> selectors

EmptyIdentifierName base=Name kind=EmptyIdentifierName
token placeholder

KeywordName base=Name
token keyword

kindmap<KeywordName>
LocalScope UnitScope RootScope ThisHandle SuperHandle ArrayUniqueMethod
ArrayAndMethod ArrayOrMethod ArrayXorMethod ConstructorName

ClassName base=Name kind=ClassName
token identifier
ParameterValueAssignment parameters

ScopedName base=Name kind=ScopedName
Name left
token separator
Name right

// ----- PRIMARY EXPRESSIONS -----

LiteralExpression base=PrimaryExpression
token literal

kindmap<LiteralExpression>
NullLiteralExpression StringLiteralExpression IntegerLiteralExpression
UnbasedUnsizedLiteralExpression RealLiteralExpression
TimeLiteralExpression WildcardLiteralExpression OneStepLiteralExpression
DefaultPatternKeyExpression

IntegerVectorExpression base=PrimaryExpression kind=IntegerVectorExpression
token size
token base
token value

EmptyQueueExpression base=PrimaryExpression kind=EmptyQueueExpression
token openBrace
token closeBrace

ConcatenationExpression base=PrimaryExpression kind=ConcatenationExpression
token openBrace
separated_list<Expression> expressions
token closeBrace

MultipleConcatenationExpression base=PrimaryExpression kind=MultipleConcatenationExpression
token openBrace
Expression expression
ConcatenationExpression concatenation
token closeBrace

StreamExpressionWithRange kind=StreamExpressionWithRange
token withKeyword
ElementSelect range

StreamExpression kind=StreamExpression
Expression expression
StreamExpressionWithRange? withRange

StreamingConcatenationExpression base=PrimaryExpression kind=StreamingConcatenationExpression
token openBrace
token operatorToken
Expression? sliceSize
token innerOpenBrace
separated_list<StreamExpression> expressions
token innerCloseBrace
token closeBrace

ParenthesizedExpression base=PrimaryExpression kind=ParenthesizedExpression
token openParen
Expression expression
token closeParen

NewArrayExpression base=Expression kind=NewArrayExpression
Name newKeyword
token openBracket
Expression sizeExpr
token closeBracket
ParenthesizedExpression? initializer

NewClassExpression base=Expression kind=NewClassExpression
Name scopedNew
ArgumentList? argList

CopyClassExpression base=Expression kind=CopyClassExpression
Name scopedNew
Expression expr

// ----- POSTFIX EXPRESSIONS -----

ElementSelectExpression base=Expression kind=ElementSelectExpression
Expression left
ElementSelect select

MemberAccessExpression base=Expression kind=MemberAccessExpression
Expression left
token dot
token name

InvocationExpression base=Expression kind=InvocationExpression
Expression left
list<AttributeInstance> attributes
ArgumentList? arguments

CastExpression base=Expression kind=CastExpression
Expression left
token apostrophe
ParenthesizedExpression right

SignedCastExpression base=Expression kind=SignedCastExpression
token signing
token apostrophe
ParenthesizedExpression inner

// ----- TIMING CONTROL -----

TimingControl final=false
empty

Delay base=TimingControl
token hash
Expression delayValue

kindmap<Delay>
DelayControl CycleDelay

Delay3 base=TimingControl kind=Delay3
token hash
token openParen
Expression delay1
token comma1
Expression? delay2
token comma2
Expression? delay3
token closeParen

EventControl base=TimingControl kind=EventControl
token at
Name eventName

EventExpression final=false
empty

SignalEventExpression base=EventExpression kind=SignalEventExpression
token edge
Expression expr

BinaryEventExpression base=EventExpression kind=BinaryEventExpression
EventExpression left
token operatorToken
EventExpression right

ParenthesizedEventExpression base=EventExpression kind=ParenthesizedEventExpression
token openParen
EventExpression expr
token closeParen

ImplicitEventControl base=TimingControl kind=ImplicitEventControl
token at
token openParen
token star
token closeParen

EventControlWithExpression base=TimingControl kind=EventControlWithExpression
token at
EventExpression expr

RepeatedEventControl base=TimingControl kind=RepeatedEventControl
token repeat
token openParen
Expression expr
token closeParen
TimingControl? eventControl

TimingControlExpression base=Expression kind=TimingControlExpression
TimingControl timing
Expression expr

TimingControlExpressionConcatenation base=Expression kind=TimingControlExpressionConcatenation
Expression left
TimingControl timing
Expression right

ShortcutCycleDelayRange base=TimingControl kind=ShortcutCycleDelayRange
token doubleHash
token openBracket
token op
token closeBracket

// ----- DECLARATIONS -----

DimensionSpecifier final=false
empty

RangeDimensionSpecifier base=DimensionSpecifier kind=RangeDimensionSpecifier
Selector selector

WildcardDimensionSpecifier base=DimensionSpecifier kind=WildcardDimensionSpecifier
token star

ColonExpressionClause kind=ColonExpressionClause
token colon
Expression expr

QueueDimensionSpecifier base=DimensionSpecifier kind=QueueDimensionSpecifier
token dollar
ColonExpressionClause? maxSizeClause

VariableDimension kind=VariableDimension
token openBracket
DimensionSpecifier? specifier
token closeBracket

Declarator kind=Declarator
token name
list<VariableDimension> dimensions
EqualsValueClause? initializer

DataDeclaration base=Member kind=DataDeclaration
tokenlist modifiers
DataType type
separated_list<Declarator> declarators
token semi

TypedefDeclaration base=Member kind=TypedefDeclaration
token typedefKeyword
DataType type
token name
list<VariableDimension> dimensions
token semi

ForwardTypedefDeclaration base=Member kind=ForwardTypedefDeclaration
token typedefKeyword
token keyword
token name
token semi

ForwardInterfaceClassTypedefDeclaration base=Member kind=ForwardInterfaceClassTypedefDeclaration
token typedefKeyword
token interfaceKeyword
token classKeyword
token name
token semi

NetStrength final=false
empty

ChargeStrength base=NetStrength kind=ChargeStrength
token openParen
token strength
token closeParen

DriveStrength base=NetStrength kind=DriveStrength
token openParen
token strength0
token comma
token strength1
token closeParen

NetDeclaration base=Member kind=NetDeclaration
token netType
NetStrength? strength
token expansionHint
DataType type
TimingControl? delay
separated_list<Declarator> declarators
token semi

WithFunctionClause kind=WithFunctionClause
token with
Name name

NetTypeDeclaration base=Member kind=NetTypeDeclaration
token keyword
DataType type
token name
WithFunctionClause? withFunction
token semi

PackageImportItem kind=PackageImportItem
token package
token doubleColon
token item

PackageImportDeclaration base=Member kind=PackageImportDeclaration
token keyword
separated_list<PackageImportItem> items
token semi

ParameterDeclarationBase final=false
token keyword

ParameterDeclaration base=ParameterDeclarationBase kind=ParameterDeclaration
DataType type
separated_list<Declarator> declarators

EqualsTypeClause kind=EqualsTypeClause
token equals
DataType type

TypeAssignment kind=TypeAssignment
token name
EqualsTypeClause? assignment

TypeParameterDeclaration base=ParameterDeclarationBase kind=TypeParameterDeclaration
token typeKeyword
separated_list<TypeAssignment> declarators

ParameterDeclarationStatement base=Member kind=ParameterDeclarationStatement
ParameterDeclarationBase parameter
token semi

PortHeader final=false
empty

PortDeclaration base=Member kind=PortDeclaration
PortHeader header
separated_list<Declarator> declarators
token semi

GenvarDeclaration base=Member kind=GenvarDeclaration
token keyword
separated_list<IdentifierName> identifiers
token semi

// ----- TYPES -----

IntegerType base=DataType
token keyword
token signing
list<VariableDimension> dimensions

kindmap<IntegerType>
BitType LogicType RegType ByteType ShortIntType IntType LongIntType
IntegerType TimeType

KeywordType base=DataType
token keyword

kindmap<KeywordType>
ShortRealType RealType RealTimeType StringType CHandleType EventType
VoidType Untyped PropertyType SequenceType

NamedType base=DataType kind=NamedType
Name name

StructUnionMember kind=StructUnionMember
list<AttributeInstance> attributes
token randomQualifier
DataType type
separated_list<Declarator> declarators
token semi

StructUnionType base=DataType
token keyword
token tagged
token packed
token signing
token openBrace
list<StructUnionMember> members
token closeBrace
list<VariableDimension> dimensions

kindmap<StructUnionType>
StructType UnionType

EnumType base=DataType kind=EnumType
token keyword
DataType? baseType
token openBrace
separated_list<Declarator> members
token closeBrace
list<VariableDimension> dimensions

TypeReference base=DataType kind=TypeReference
token typeKeyword
token openParen
Expression expr
token closeParen

DotMemberClause kind=DotMemberClause
token dot
token member

VirtualInterfaceType base=DataType kind=VirtualInterfaceType
token virtualKeyword
token interfaceKeyword
token name
ParameterValueAssignment? parameters
DotMemberClause? modport

ImplicitType base=DataType kind=ImplicitType
token signing
list<VariableDimension> dimensions

// ----- ASSERTIONS -----

DeferredAssertion kind=DeferredAssertion
token hash
token zero
token finalKeyword

ElseClause kind=ElseClause
token elseKeyword
SyntaxNode clause

ActionBlock kind=ActionBlock
Statement? statement
ElseClause? elseClause

ImmediateAssertionStatement base=Statement
token keyword
DeferredAssertion? delay
ParenthesizedExpression expr
ActionBlock action

kindmap<ImmediateAssertionStatement>
ImmediateAssertStatement ImmediateAssumeStatement ImmediateCoverStatement

DisableIff kind=DisableIff
token disable
token iff
token openParen
Expression expr
token closeParen

PropertySpec kind=PropertySpec
TimingControl? clocking
DisableIff? disable
Expression expr

ConcurrentAssertionStatement base=Statement
token keyword
token propertyOrSequence
token openParen
PropertySpec propertySpec
token closeParen
ActionBlock action

kindmap<ConcurrentAssertionStatement>
AssertPropertyStatement AssumePropertyStatement CoverSequenceStatement
CoverPropertyStatement RestrictPropertyStatement ExpectPropertyStatement

ConcurrentAssertionMember base=Member kind=ConcurrentAssertionMember
ConcurrentAssertionStatement statement

ImmediateAssertionMember base=Member kind=ImmediateAssertionMember
ImmediateAssertionStatement statement

// ----- STATEMENTS -----

EmptyStatement base=Statement kind=EmptyStatement
token semicolon

ConditionalStatement base=Statement kind=ConditionalStatement
token uniqueOrPriority
token ifKeyword
token openParen
ConditionalPredicate predicate
token closeParen
Statement statement
ElseClause? elseClause

CaseItem final=false
empty

DefaultCaseItem base=CaseItem kind=DefaultCaseItem
token defaultKeyword
token colon
SyntaxNode clause

PatternCaseItem base=CaseItem kind=PatternCaseItem
Pattern pattern
token tripleAnd
Expression? expr
token colon
Statement statement

StandardCaseItem base=CaseItem kind=StandardCaseItem
separated_list<Expression> expressions
token colon
SyntaxNode clause

CaseStatement base=Statement kind=CaseStatement
token uniqueOrPriority
token caseKeyword
token openParen
Expression expr
token closeParen
token matchesOrInside
list<CaseItem> items
token endcase

ForeverStatement base=Statement kind=ForeverStatement
token foreverKeyword
Statement statement

LoopStatement base=Statement kind=LoopStatement
token repeatOrWhile
token openParen
Expression expr
token closeParen
Statement statement

DoWhileStatement base=Statement kind=DoWhileStatement
token doKeyword
Statement statement
token whileKeyword
token openParen
Expression expr
token closeParen
token semi

ForVariableDeclaration kind=ForVariableDeclaration
token varKeyword
DataType? type
Declarator declarator

ForLoopStatement base=Statement kind=ForLoopStatement
token forKeyword
token openParen
separated_list<SyntaxNode> initializers
token semi1
Expression stopExpr
token semi2
separated_list<Expression> steps
token closeParen
Statement statement

ForeachLoopList kind=ForeachLoopList
token openParen
Name arrayName
token openBracket
separated_list<Name> loopVariables
token closeBracket
token closeParen

ForeachLoopStatement base=Statement kind=ForeachLoopStatement
token keyword
ForeachLoopList loopList
Statement statement

ReturnStatement base=Statement kind=ReturnStatement
token returnKeyword
Expression? returnValue
token semi

JumpStatement base=Statement kind=JumpStatement
token breakOrContinue
token semi

TimingControlStatement base=Statement kind=TimingControlStatement
TimingControl timingControl
Statement statement

ExpressionStatement base=Statement kind=ExpressionStatement
Expression expr
token semi

VoidCastedCallStatement base=Statement kind=VoidCastedCallStatement
token voidKeyword
token apostrophe
token openParen
Expression expr
token closeParen
token semi

ProceduralAssignStatement base=Statement
token keyword
Expression lvalue
token equals
Expression value
token semi

kindmap<ProceduralAssignStatement>
ProceduralAssignStatement ProceduralForceStatement

ProceduralDeassignStatement base=Statement
token keyword
Expression variable
token semi

kindmap<ProceduralDeassignStatement>
ProceduralDeassignStatement ProceduralReleaseStatement

DisableStatement base=Statement kind=DisableStatement
token disable
Name name
token semi

DisableForkStatement base=Statement kind=DisableForkStatement
token disable
token fork
token semi

NamedBlockClause kind=NamedBlockClause
token colon
token name

BlockStatement base=Statement
token begin
NamedBlockClause? blockName
list<SyntaxNode> items
token end
NamedBlockClause? endBlockName

kindmap<BlockStatement>
SequentialBlockStatement ParallelBlockStatement

WaitStatement base=Statement kind=WaitStatement
token wait
token openParen
Expression expr
token closeParen
Statement statement

WaitForkStatement base=Statement kind=WaitForkStatement
token wait
token fork
token semi

WaitOrderStatement base=Statement kind=WaitOrderStatement
token wait_order
token openParen
separated_list<Name> names
token closeParen
ActionBlock action

RandCaseItem kind=RandCaseItem
Expression expr
token colon
Statement statement

RandCaseStatement base=Statement kind=RandCaseStatement
token randCase
list<RandCaseItem> items
token endCase

EventTriggerStatement base=Statement
token trigger
TimingControl? timing
Name name

kindmap<EventTriggerStatement>
BlockingEventTriggerStatement NonblockingEventTriggerStatement

// ----- MODULES -----

PortList final=false
empty

NonAnsiPort final=false
empty

PortExpression final=false
empty

PortReference base=PortExpression kind=PortReference
token name
ElementSelect? select

PortConcatenation base=PortExpression kind=PortConcatenation
token openBrace
separated_list<PortReference> references
token closeBrace

ImplicitNonAnsiPort base=NonAnsiPort kind=ImplicitNonAnsiPort
PortExpression? expr

ExplicitNonAnsiPort base=NonAnsiPort kind=ExplicitNonAnsiPort
token dot
token name
token openParen
PortExpression? expr
token closeParen

NonAnsiPortList base=PortList kind=NonAnsiPortList
token openParen
separated_list<NonAnsiPort> ports
token closeParen

InterfacePortHeader base=PortHeader kind=InterfacePortHeader
token nameOrKeyword
DotMemberClause? modport

VariablePortHeader base=PortHeader kind=VariablePortHeader
token direction
token varKeyword
DataType dataType

InterconnectPortHeader base=PortHeader kind=InterconnectPortHeader
token direction
token interconnect
ImplicitType type

NetPortHeader base=PortHeader kind=NetPortHeader
token direction
token netType
DataType dataType

ImplicitAnsiPort base=Member kind=ImplicitAnsiPort
PortHeader header
Declarator declarator

ExplicitAnsiPort base=Member kind=ExplicitAnsiPort
token direction
token dot
token name
token openParen
Expression? expr
token closeParen

AnsiPortList base=PortList kind=AnsiPortList
token openParen
separated_list<Member> ports
token closeParen

WildcardPortList base=PortList kind=WildcardPortList
token openParen
token dotStar
token closeParen

ParameterPortList kind=ParameterPortList
token hash
token openParen
separated_list<ParameterDeclarationBase> declarations
token closeParen

ModuleHeader
token moduleKeyword
token lifetime
token name
list<PackageImportDeclaration> imports
ParameterPortList? parameters
PortList? ports
token semi

kindmap<ModuleHeader>
ModuleHeader ProgramHeader InterfaceHeader PackageHeader

ModuleDeclaration base=Member
ModuleHeader header
list<Member> members
token endmodule
NamedBlockClause? blockName

kindmap<ModuleDeclaration>
ModuleDeclaration InterfaceDeclaration ProgramDeclaration PackageDeclaration

ExternModule kind=ExternModule
token externKeyword
ModuleHeader header

// ----- MEMBERS -----

EmptyMember base=Member kind=EmptyMember
tokenlist qualifiers
token semi

ProceduralBlock base=Member
token keyword
Statement statement

kindmap<ProceduralBlock>
InitialBlock FinalBlock AlwaysBlock AlwaysCombBlock AlwaysFFBlock AlwaysLatchBlock

GenerateRegion base=Member kind=GenerateRegion
token keyword
list<Member> members
token endgenerate

LoopGenerate base=Member kind=LoopGenerate
token keyword
token openParen
token genvar
token identifier
token equals
Expression initialExpr
token semi1
Expression stopExpr
token semi2
Expression iterationExpr
token closeParen
Member block

IfGenerate base=Member kind=IfGenerate
token keyword
token openParen
Expression condition
token closeParen
Member block
ElseClause? elseClause

CaseGenerate base=Member kind=CaseGenerate
token keyword
token openParen
Expression condition
token closeParen
list<CaseItem> items
token endCase

GenerateBlock base=Member kind=GenerateBlock
NamedLabel? label
token begin
NamedBlockClause? beginName
list<Member> members
token end
NamedBlockClause? endName

DividerClause kind=DividerClause
token divide
token value

TimeUnitsDeclaration base=Member kind=TimeUnitsDeclaration
token keyword
token time
DividerClause? divider
token semi

PortConnection final=false
list<AttributeInstance> attributes

EmptyPortConnection base=PortConnection kind=EmptyPortConnection
token placeholder

OrderedPortConnection base=PortConnection kind=OrderedPortConnection
Expression expr

NamedPortConnection base=PortConnection kind=NamedPortConnection
token dot
token name
token openParen
Expression? expr
token closeParen

WildcardPortConnection base=PortConnection kind=WildcardPortConnection
token dotStar

HierarchicalInstance kind=HierarchicalInstance
token name
list<VariableDimension> dimensions
token openParen
separated_list<PortConnection> connections
token closeParen

HierarchyInstantiation base=Member kind=HierarchyInstantiation
token type
ParameterValueAssignment? parameters
separated_list<HierarchicalInstance> instances
token semi

GateInstanceName kind=GateInstanceName
token name
list<VariableDimension> dimensions

GateInstance kind=GateInstance
GateInstanceName? decl
token openParen
separated_list<Expression> connections
token closeParen

GateInstantiation base=Member kind=GateInstantiation
token gateType
DriveStrength? strength
TimingControl? delay
separated_list<GateInstance> instances
token semi

FunctionPort kind=FunctionPort
list<AttributeInstance> attributes
token constKeyword
token direction
token varKeyword
DataType? dataType
Declarator declarator

FunctionPortList kind=FunctionPortList
token openParen
separated_list<FunctionPort> ports
token closeParen

FunctionPrototype kind=FunctionPrototype
token keyword
token lifetime
DataType returnType
Name name
FunctionPortList? portList

FunctionDeclaration base=Member
FunctionPrototype prototype
token semi
list<SyntaxNode> items
token end
NamedBlockClause? endBlockName

kindmap<FunctionDeclaration>
FunctionDeclaration TaskDeclaration

AssertionItemPort kind=AssertionItemPort
list<AttributeInstance> attributes
token local
token direction
DataType type
Declarator declarator

AssertionItemPortList kind=AssertionItemPortList
token openParen
separated_list<AssertionItemPort> ports
token closeParen

LetDeclaration kind=LetDeclaration base=Member
token let
token identifier
AssertionItemPortList? portList
EqualsValueClause initializer
token semi

PropertyDeclaration kind=PropertyDeclaration base=Member
token keyword
token name
AssertionItemPortList? portList
token semi
list<Member> assertionVariables
PropertySpec propertySpec
token optionalSemi
token end
NamedBlockClause? endBlockName

SequenceDeclaration kind=SequenceDeclaration base=Member
token keyword
token name
AssertionItemPortList? portList
token semi
list<Member> assertionVariables
Expression seqExpr
token optionalSemi
token end
NamedBlockClause? endBlockName

ExtendsClause kind=ExtendsClause
token keyword
Name baseName
ArgumentList? arguments

ImplementsClause kind=ImplementsClause
token keyword
separated_list<Name> interfaces

ClassDeclaration base=Member kind=ClassDeclaration
token virtualOrInterface
token classKeyword
token lifetime
token name
ParameterPortList? parameters
ExtendsClause? extendsClause
ImplementsClause? implementsClause
token semi
list<Member> items
token endClass
NamedBlockClause? endBlockName

ClassPropertyDeclaration base=Member kind=ClassPropertyDeclaration
tokenlist qualifiers
Member declaration

ClassMethodDeclaration base=Member kind=ClassMethodDeclaration
tokenlist qualifiers
FunctionDeclaration declaration

ClassMethodPrototype base=Member kind=ClassMethodPrototype
tokenlist qualifiers
FunctionPrototype prototype
token semi

ContinuousAssign base=Member kind=ContinuousAssign
token assign
DriveStrength? strength
TimingControl? delay
separated_list<Expression> assignments
token semi

DefParamAssignment kind=DefParamAssignment
Name name
EqualsValueClause? setter

DefParam base=Member kind=DefParam
token defparam
separated_list<DefParamAssignment> assignments
token semi

ModportClockingPort base=Member kind=ModportClockingPort
token clocking
token name

ModportPort final=false
empty

ModportNamedPort base=ModportPort kind=ModportNamedPort
token name

ModportExplicitPort base=ModportPort kind=ModportExplicitPort
token dot
token name
token openParen
Expression? expr
token closeParen

ModportSimplePortList base=Member kind=ModportSimplePortList
token direction
separated_list<ModportPort> ports

ModportSubroutinePort base=ModportPort kind=ModportSubroutinePort
FunctionPrototype prototype

ModportSubroutinePortList base=Member kind=ModportSubroutinePortList
token importExport
separated_list<ModportPort> ports

ModportItem kind=ModportItem
token name
AnsiPortList ports

ModportDeclaration base=Member kind=ModportDeclaration
token keyword
separated_list<ModportItem> items
token semi

ClockingSkew kind=ClockingSkew
token edge
Delay? delay

ClockingDirection kind=ClockingDirection
token input
ClockingSkew? inputSkew
token output
ClockingSkew? ouputSkew

DefaultSkewItem base=Member kind=DefaultSkewItem
token keyword
ClockingDirection direction
token semi

ClockingItem base=Member kind=ClockingItem
ClockingDirection direction
separated_list<AttributeSpec> decls
token semi

ClockingDeclaration base=Member kind=ClockingDeclaration
token globalOrDefault
token clocking
token blockName
token at
EventExpression event
token semi
list<Member> items
token endClocking
NamedBlockClause? endBlockName

DefaultClockingReference base=Member kind=DefaultClockingReference
token defaultKeyword
token clocking
token name
token semi

DPIImportExport base=Member kind=DPIImportExport
token keyword
token stringLiteral
token property
token c_identifier
token equals
FunctionPrototype method
token semi

ElabSystemTask base=Member kind=ElabSystemTask
token name
ArgumentList? arguments
token semi

// ----- CONSTRAINTS -----

ConstraintItem final=false
empty

DistWeight kind=DistWeight
token op
Expression expr

DistItem kind=DistItem
Expression range
DistWeight? weight

DistConstraintList kind=DistConstraintList
token dist
token openBrace
separated_list<DistItem> items
token closeBrace

ExpressionOrDist base=Expression kind=ExpressionOrDist
Expression expr
DistConstraintList distribution

ExpressionConstraint base=ConstraintItem kind=ExpressionConstraint
token soft
Expression expr
token semi

UniquenessConstraint base=ConstraintItem kind=UniquenessConstraint
token unique
OpenRangeList ranges
token semi

ImplicationConstraint base=ConstraintItem kind=ImplicationConstraint
Expression left
token arrow
ConstraintItem constraints

ElseConstraintClause kind=ElseConstraintClause
token elseKeyword
ConstraintItem constraints

ConditionalConstraint base=ConstraintItem kind=ConditionalConstraint
token ifKeyword
token openParen
Expression condition
token closeParen
ConstraintItem constraints
ElseConstraintClause? elseClause

LoopConstraint base=ConstraintItem kind=LoopConstraint
token foreachKeyword
ForeachLoopList loopList
ConstraintItem constraints

DisableConstraint base=ConstraintItem kind=DisableConstraint
token disable
token soft
Name name
token semi

SolveBeforeConstraint base=ConstraintItem kind=SolveBeforeConstraint
token solve
separated_list<Expression> beforeExpr
token before
separated_list<Expression> afterExpr
token semi

ConstraintBlock base=ConstraintItem kind=ConstraintBlock
token openBrace
list<ConstraintItem> items
token closeBrace

ConstraintPrototype base=Member kind=ConstraintPrototype
tokenlist qualifiers
token keyword
token name
token semi

ConstraintDeclaration base=Member kind=ConstraintDeclaration
tokenlist qualifiers
token keyword
token name
ConstraintBlock block

ParenExpressionList kind=ParenExpressionList
token openParen
separated_list<Expression> expressions
token closeParen

ArrayOrRandomizeMethodExpression base=Expression kind=ArrayOrRandomizeMethodExpression
Expression method
token with
ParenExpressionList? args
ConstraintBlock? constraints

// ----- COVER GROUPS -----

WithFunctionSample kind=WithFunctionSample
token with
token function
token sample
AnsiPortList portList

BlockEventExpression final=false
empty

BinaryBlockEventExpression base=BlockEventExpression kind=BinaryBlockEventExpression
BlockEventExpression left
token orKeyword
BlockEventExpression right

PrimaryBlockEventExpression base=BlockEventExpression kind=PrimaryBlockEventExpression
token keyword
Name name

BlockCoverageEvent kind=BlockCoverageEvent
token atat
token openParen
BlockEventExpression expr
token closeParen

CovergroupDeclaration base=Member kind=CovergroupDeclaration
token covergroup
token name
AnsiPortList? portList
SyntaxNode? event
token semi
list<Member> members
token endgroup
NamedBlockClause? endBlockName

CoverageOption base=Member kind=CoverageOption
token option
token dot
token name
token equals
Expression expr
token semi

Coverpoint base=Member kind=Coverpoint
DataType? type
NamedLabel? label
token coverpoint
Expression expr
token openBrace
list<Member> members
token closeBrace
token emptySemi

CoverageBinInitializer final=false
empty

DefaultCoverageBinInitializer base=CoverageBinInitializer kind=DefaultCoverageBinInitializer
token defaultKeyword
token sequenceKeyword

WithClause kind=WithClause
token with
token openParen
Expression expr
token closeParen

ExpressionCoverageBinInitializer base=CoverageBinInitializer kind=ExpressionCoverageBinInitializer
Expression expr
WithClause? withClause

RangeCoverageBinInitializer base=CoverageBinInitializer kind=RangeCoverageBinInitializer
OpenRangeList ranges
WithClause? withClause

TransRepeatRange kind=TransRepeatRange
token openBracket
token specifier
Selector? selector
token closeBracket

TransRange kind=TransRange
separated_list<Expression> items
TransRepeatRange? repeat

TransSet kind=TransSet
token openParen
separated_list<TransRange> ranges
token closeParen

TransListCoverageBinInitializer base=CoverageBinInitializer kind=TransListCoverageBinInitializer
separated_list<TransSet> sets
WithClause? withClause

IffClause kind=IffClause
token iff
token openParen
Expression expr
token closeParen

CoverageBins base=Member kind=CoverageBins
token wildcard
token keyword
token name
ElementSelect? selector
token equals
CoverageBinInitializer initializer
IffClause? iff
token semi

// ----- TOP LEVEL -----

CompilationUnit kind=CompilationUnit
list<Member> members
token endOfFile

// ----- DIRECTIVES -----

Directive final=false
token directive

SimpleDirective base=Directive

kindmap<SimpleDirective>
CellDefineDirective NoUnconnectedDriveDirective EndCellDefineDirective EndKeywordsDirective
ResetAllDirective UndefineAllDirective

IncludeDirective base=Directive kind=IncludeDirective
token fileName

ConditionalBranchDirective base=Directive
token name
tokenlist disabledTokens

kindmap<ConditionalBranchDirective>
ElsIfDirective IfDefDirective IfNDefDirective

UnconditionalBranchDirective base=Directive
tokenlist disabledTokens

kindmap<UnconditionalBranchDirective>
EndIfDirective ElseDirective

MacroArgumentDefault kind=MacroArgumentDefault
token equals
tokenlist tokens

MacroFormalArgument kind=MacroFormalArgument
token name
MacroArgumentDefault? defaultValue

MacroFormalArgumentList kind=MacroFormalArgumentList
token openParen
separated_list<MacroFormalArgument> args
token closeParen

DefineDirective base=Directive kind=DefineDirective
token name
MacroFormalArgumentList? formalArguments
tokenlist body

MacroActualArgument kind=MacroActualArgument
tokenlist tokens

MacroActualArgumentList kind=MacroActualArgumentList
token openParen
separated_list<MacroActualArgument> args
token closeParen

MacroUsage base=Directive kind=MacroUsage
MacroActualArgumentList? args

TimeScaleDirective base=Directive kind=TimeScaleDirective
token timeUnit
token slash
token timePrecision

DefaultNetTypeDirective base=Directive kind=DefaultNetTypeDirective
token netType

UnconnectedDriveDirective base=Directive kind=UnconnectedDriveDirective
token strength

LineDirective base=Directive kind=LineDirective
token lineNumber
token fileName
token level

UndefDirective base=Directive kind=UndefDirective
token name

BeginKeywordsDirective base=Directive kind=BeginKeywordsDirective
token versionSpecifier

PragmaExpression final=false
empty

SimplePragmaExpression base=PragmaExpression kind=SimplePragmaExpression
token value

NameValuePragmaExpression base=PragmaExpression kind=NameValuePragmaExpression
token name
token equals
PragmaExpression value

NumberPragmaExpression base=PragmaExpression kind=NumberPragmaExpression
token size
token base
token value

ParenPragmaExpression base=PragmaExpression kind=ParenPragmaExpression
token openParen
separated_list<PragmaExpression> values
token closeParen

PragmaDirective base=Directive kind=PragmaDirective
token name
separated_list<PragmaExpression> args
