Expression final=false
empty

DataType base=Expression final=false
empty

// ----- ATTRIBUTES -----

EqualsValueClause
token equals
Expression expr

AttributeSpec
token name
EqualsValueClause? value

AttributeInstance
token openParen
separated_list<AttributeSpec> specs
token closeParen

NamedLabel
token name
token colon

Statement final=false
NamedLabel? label
list<AttributeInstance> attributes

Member final=false
list<AttributeInstance> attributes

// ----- ARGUMENTS -----

Argument final=false
empty

EmptyArgument base=Argument
token placeholder

OrderedArgument base=Argument
Expression expr

NamedArgument base=Argument
token dot
token name
token openParen
Expression? expr
token closeParen

ArgumentList
token openParen
separated_list<Argument> parameters
token closeParen

ParameterValueAssignment
token hash
ArgumentList assignments

// ----- PATTERNS -----

Pattern final=false
empty

VariablePattern base=Pattern
token dot
token variableName

WildcardPattern base=Pattern
token dotStar

ExpressionPattern base=Pattern
Expression expr

TaggedPattern base=Pattern
token tagged
token memberName
Pattern? pattern

StructurePatternMember final=false
empty

OrderedStructurePatternMember base=StructurePatternMember
Pattern pattern

NamedStructurePatternMember base=StructurePatternMember
token name
token colon
Pattern pattern

StructurePattern base=Pattern
token openBrace
separated_list<StructurePatternMember> members
token closeBrace

MatchesClause
token matchesKeyword
Pattern pattern

ConditionalPattern
Expression expr
MatchesClause? matchesClause

ConditionalPredicate
separated_list<ConditionalPattern> conditions

AssignmentPattern final=false
empty

SimpleAssignmentPattern base=AssignmentPattern
token openBrace
separated_list<Expression> items
token closeBrace

AssignmentPatternItem
Expression key
token colon
Expression expr

StructuredAssignmentPattern base=AssignmentPattern
token openBrace
separated_list<AssignmentPatternItem> items
token closeBrace

ReplicatedAssignmentPattern base=AssignmentPattern
token openBrace
Expression countExpr
token innerOpenBrace
separated_list<Expression> items
token innerCloseBrace
token closeBrace

// ----- EXPRESSIONS -----

BadExpression base=Expression
Expression expr

PrimaryExpression base=Expression final=false
empty

PrefixUnaryExpression base=Expression multiKind=true
token operatorToken
list<AttributeInstance> attributes
Expression operand

kindmap<PrefixUnaryExpression>
UnaryPlusExpression UnaryMinusExpression UnaryBitwiseAndExpression
UnaryBitwiseNandExpression UnaryBitwiseOrExpression UnaryBitwiseNorExpression
UnaryBitwiseXorExpression UnaryBitwiseXnorExpression UnaryPreincrementExpression
UnaryPredecrementExpression UnaryLogicalNotExpression UnaryBitwiseNotExpression
UnarySequenceDelayExpression UnarySequenceEventExpression UnaryNotPropertyExpression
AcceptOnPropertyExpression RejectOnPropertyExpression SyncAcceptOnPropertyExpression
SyncRejectOnPropertyExpression NextTimePropertyExpression SNextTimePropertyExpression
AlwaysPropertyExpression SAlwaysPropertyExpression EventuallyPropertyExpression
SEventuallyPropertyExpression

PostfixUnaryExpression base=Expression multiKind=true
Expression operand
list<AttributeInstance> attributes
token operatorToken

kindmap<PostfixUnaryExpression>
PostincrementExpression PostdecrementExpression

BinaryExpression base=Expression multiKind=true
Expression left
token operatorToken
list<AttributeInstance> attributes
Expression right

kindmap<BinaryExpression>
AddExpression SubtractExpression MultiplyExpression DivideExpression PowerExpression
ModExpression EqualityExpression InequalityExpression CaseEqualityExpression
CaseInequalityExpression WildcardEqualityExpression WildcardInequalityExpression
LessThanExpression LessThanEqualExpression GreaterThanExpression GreaterThanEqualExpression
LogicalAndExpression LogicalOrExpression BinaryAndExpression BinaryOrExpression
BinaryXorExpression BinaryXnorExpression LogicalImplicationExpression
LogicalEquivalenceExpression LogicalShiftLeftExpression LogicalShiftRightExpression
ArithmeticShiftLeftExpression ArithmeticShiftRightExpression BinarySequenceDelayExpression
OrSequenceExpression AndSequenceExpression IntersectSequenceExpression
WithinSequenceExpression ThroughoutSequenceExpression IffPropertyExpression
UntilPropertyExpression SUntilPropertyExpression UntilWithPropertyExpression
SUntilWithPropertyExpression ImpliesPropertyExpression
OverlappedImplicationPropertyExpression NonOverlappedImplicationPropertyExpression
OverlappedFollowedByPropertyExpression NonOverlappedFollowedByPropertyExpression
AssignmentExpression AddAssignmentExpression SubtractAssignmentExpression
MultiplyAssignmentExpression DivideAssignmentExpression ModAssignmentExpression
AndAssignmentExpression OrAssignmentExpression XorAssignmentExpression
LogicalLeftShiftAssignmentExpression LogicalRightShiftAssignmentExpression
ArithmeticLeftShiftAssignmentExpression ArithmeticRightShiftAssignmentExpression
NonblockingAssignmentExpression

MinTypMaxExpression base=Expression
Expression min
token colon1
Expression typ
token colon2
Expression max

TaggedUnionExpression base=Expression
token tagged
token member
Expression? expr

OpenRangeExpression base=Expression
token openBracket
Expression left
token colon
Expression right
token closeBracket

OpenRangeList
token openBrace
separated_list<Expression> valueRanges
token closeBrace

InsideExpression base=Expression
Expression expr
token inside
OpenRangeList ranges

ConditionalExpression base=Expression
ConditionalPredicate predicate
token question
list<AttributeInstance> attributes
Expression left
token colon
Expression right

AssignmentPatternExpression base=PrimaryExpression
DataType? type
AssignmentPattern pattern

// ----- SELECTORS -----

Selector final=false
empty

BitSelect base=Selector
Expression expr

RangeSelect base=Selector multiKind=true
Expression left
token range
Expression right

kindmap<RangeSelect>
SimpleRangeSelect AscendingRangeSelect DescendingRangeSelect

ElementSelect
token openBracket
Selector? selector
token closeBracket

// ----- NAMES -----

Name base=Expression final=false
empty

IdentifierName base=Name
token identifier

SystemName base=Name
token systemIdentifier

IdentifierSelectName base=Name
token identifier
list<ElementSelect> selectors

EmptyIdentifierName base=Name
token placeholder

KeywordName base=Name multiKind=true
token keyword

kindmap<KeywordName>
LocalScope UnitScope RootScope ThisHandle SuperHandle ArrayUniqueMethod
ArrayAndMethod ArrayOrMethod ArrayXorMethod ConstructorName

ClassName base=Name
token identifier
ParameterValueAssignment parameters

ScopedName base=Name
Name left
token separator
Name right

// ----- PRIMARY EXPRESSIONS -----

LiteralExpression base=PrimaryExpression multiKind=true
token literal

kindmap<LiteralExpression>
NullLiteralExpression StringLiteralExpression IntegerLiteralExpression
UnbasedUnsizedLiteralExpression RealLiteralExpression
TimeLiteralExpression WildcardLiteralExpression OneStepLiteralExpression
DefaultPatternKeyExpression

IntegerVectorExpression base=PrimaryExpression
token size
token base
token value

EmptyQueueExpression base=PrimaryExpression
token openBrace
token closeBrace

ConcatenationExpression base=PrimaryExpression
token openBrace
separated_list<Expression> expressions
token closeBrace

MultipleConcatenationExpression base=PrimaryExpression
token openBrace
Expression expression
ConcatenationExpression concatenation
token closeBrace

StreamExpressionWithRange
token withKeyword
ElementSelect range

StreamExpression
Expression expression
StreamExpressionWithRange? withRange

StreamingConcatenationExpression base=PrimaryExpression
token openBrace
token operatorToken
Expression? sliceSize
token innerOpenBrace
separated_list<StreamExpression> expressions
token innerCloseBrace
token closeBrace

ParenthesizedExpression base=PrimaryExpression
token openParen
Expression expression
token closeParen

NewArrayExpression base=Expression
Name newKeyword
token openBracket
Expression sizeExpr
token closeBracket
ParenthesizedExpression? initializer

NewClassExpression base=Expression
Name scopedNew
ArgumentList? argList

CopyClassExpression base=Expression
Name scopedNew
Expression expr

// ----- POSTFIX EXPRESSIONS -----

ElementSelectExpression base=Expression
Expression left
ElementSelect select

MemberAccessExpression base=Expression
Expression left
token dot
token name

InvocationExpression base=Expression
Expression left
list<AttributeInstance> attributes
ArgumentList? arguments

CastExpression base=Expression
Expression left
token apostrophe
ParenthesizedExpression right

SignedCastExpression base=Expression
token signing
token apostrophe
ParenthesizedExpression inner

// ----- TIMING CONTROL -----

TimingControl final=false
empty

Delay base=TimingControl multiKind=true
token hash
Expression delayValue

kindmap<Delay>
DelayControl CycleDelay

Delay3 base=TimingControl
token hash
token openParen
Expression delay1
token comma1
Expression? delay2
token comma2
Expression? delay3
token closeParen

EventControl base=TimingControl
token at
Name eventName

IffEventClause
token iff
Expression expr

EventExpression final=false
empty

SignalEventExpression base=EventExpression
token edge
Expression expr
IffEventClause? iffClause

BinaryEventExpression base=EventExpression
EventExpression left
token operatorToken
EventExpression right

ParenthesizedEventExpression base=EventExpression
token openParen
EventExpression expr
token closeParen

ImplicitEventControl base=TimingControl
token at
token openParen
token star
token closeParen

EventControlWithExpression base=TimingControl
token at
EventExpression expr

RepeatedEventControl base=TimingControl
token repeat
token openParen
Expression expr
token closeParen
TimingControl? eventControl

TimingControlExpression base=Expression
TimingControl timing
Expression expr

TimingControlExpressionConcatenation base=Expression
Expression left
TimingControl timing
Expression right

ShortcutCycleDelayRange base=TimingControl
token doubleHash
token openBracket
token op
token closeBracket

// ----- DECLARATIONS -----

DimensionSpecifier final=false
empty

RangeDimensionSpecifier base=DimensionSpecifier
Selector selector

WildcardDimensionSpecifier base=DimensionSpecifier
token star

ColonExpressionClause
token colon
Expression expr

QueueDimensionSpecifier base=DimensionSpecifier
token dollar
ColonExpressionClause? maxSizeClause

VariableDimension
token openBracket
DimensionSpecifier? specifier
token closeBracket

Declarator
token name
list<VariableDimension> dimensions
EqualsValueClause? initializer

DataDeclaration base=Member
tokenlist modifiers
DataType type
separated_list<Declarator> declarators
token semi

TypedefDeclaration base=Member
token typedefKeyword
DataType type
token name
list<VariableDimension> dimensions
token semi

ForwardTypedefDeclaration base=Member
token typedefKeyword
token keyword
token name
token semi

ForwardInterfaceClassTypedefDeclaration base=Member
token typedefKeyword
token interfaceKeyword
token classKeyword
token name
token semi

NetStrength final=false
empty

ChargeStrength base=NetStrength
token openParen
token strength
token closeParen

DriveStrength base=NetStrength
token openParen
token strength0
token comma
token strength1
token closeParen

NetDeclaration base=Member
token netType
NetStrength? strength
token expansionHint
DataType type
TimingControl? delay
separated_list<Declarator> declarators
token semi

UserDefinedNetDeclaration base=Member
token netType
TimingControl delay
separated_list<Declarator> declarators
token semi

WithFunctionClause
token with
Name name

NetTypeDeclaration base=Member
token keyword
DataType type
token name
WithFunctionClause? withFunction
token semi

PackageImportItem
token package
token doubleColon
token item

PackageImportDeclaration base=Member
token keyword
separated_list<PackageImportItem> items
token semi

ParameterDeclarationBase final=false
token keyword

ParameterDeclaration base=ParameterDeclarationBase
DataType type
separated_list<Declarator> declarators

EqualsTypeClause
token equals
DataType type

TypeAssignment
token name
EqualsTypeClause? assignment

TypeParameterDeclaration base=ParameterDeclarationBase
token typeKeyword
separated_list<TypeAssignment> declarators

ParameterDeclarationStatement base=Member
ParameterDeclarationBase parameter
token semi

PortHeader final=false
empty

PortDeclaration base=Member
PortHeader header
separated_list<Declarator> declarators
token semi

GenvarDeclaration base=Member
token keyword
separated_list<IdentifierName> identifiers
token semi

// ----- TYPES -----

IntegerType base=DataType multiKind=true
token keyword
token signing
list<VariableDimension> dimensions

kindmap<IntegerType>
BitType LogicType RegType ByteType ShortIntType IntType LongIntType
IntegerType TimeType

KeywordType base=DataType multiKind=true
token keyword

kindmap<KeywordType>
ShortRealType RealType RealTimeType StringType CHandleType EventType
VoidType Untyped PropertyType SequenceType

NamedType base=DataType
Name name

StructUnionMember
list<AttributeInstance> attributes
token randomQualifier
DataType type
separated_list<Declarator> declarators
token semi

StructUnionType base=DataType multiKind=true
token keyword
token tagged
token packed
token signing
token openBrace
list<StructUnionMember> members
token closeBrace
list<VariableDimension> dimensions

kindmap<StructUnionType>
StructType UnionType

EnumType base=DataType
token keyword
DataType? baseType
token openBrace
separated_list<Declarator> members
token closeBrace
list<VariableDimension> dimensions

TypeReference base=DataType
token typeKeyword
token openParen
Expression expr
token closeParen

DotMemberClause
token dot
token member

VirtualInterfaceType base=DataType
token virtualKeyword
token interfaceKeyword
token name
ParameterValueAssignment? parameters
DotMemberClause? modport

ImplicitType base=DataType
token signing
list<VariableDimension> dimensions

// ----- ASSERTIONS -----

DeferredAssertion
token hash
token zero
token finalKeyword

ElseClause
token elseKeyword
SyntaxNode clause

ActionBlock
Statement? statement
ElseClause? elseClause

ImmediateAssertionStatement base=Statement multiKind=true
token keyword
DeferredAssertion? delay
ParenthesizedExpression expr
ActionBlock action

kindmap<ImmediateAssertionStatement>
ImmediateAssertStatement ImmediateAssumeStatement ImmediateCoverStatement

DisableIff
token disable
token iff
token openParen
Expression expr
token closeParen

PropertySpec
TimingControl? clocking
DisableIff? disable
Expression expr

ConcurrentAssertionStatement base=Statement multiKind=true
token keyword
token propertyOrSequence
token openParen
PropertySpec propertySpec
token closeParen
ActionBlock action

kindmap<ConcurrentAssertionStatement>
AssertPropertyStatement AssumePropertyStatement CoverSequenceStatement
CoverPropertyStatement RestrictPropertyStatement ExpectPropertyStatement

ConcurrentAssertionMember base=Member
ConcurrentAssertionStatement statement

ImmediateAssertionMember base=Member
ImmediateAssertionStatement statement

// ----- STATEMENTS -----

EmptyStatement base=Statement
token semicolon

ConditionalStatement base=Statement
token uniqueOrPriority
token ifKeyword
token openParen
ConditionalPredicate predicate
token closeParen
Statement statement
ElseClause? elseClause

CaseItem final=false
empty

DefaultCaseItem base=CaseItem
token defaultKeyword
token colon
SyntaxNode clause

PatternCaseItem base=CaseItem
Pattern pattern
token tripleAnd
Expression? expr
token colon
Statement statement

StandardCaseItem base=CaseItem
separated_list<Expression> expressions
token colon
SyntaxNode clause

CaseStatement base=Statement
token uniqueOrPriority
token caseKeyword
token openParen
Expression expr
token closeParen
token matchesOrInside
list<CaseItem> items
token endcase

ForeverStatement base=Statement
token foreverKeyword
Statement statement

LoopStatement base=Statement
token repeatOrWhile
token openParen
Expression expr
token closeParen
Statement statement

DoWhileStatement base=Statement
token doKeyword
Statement statement
token whileKeyword
token openParen
Expression expr
token closeParen
token semi

ForVariableDeclaration
token varKeyword
DataType? type
Declarator declarator

ForLoopStatement base=Statement
token forKeyword
token openParen
separated_list<SyntaxNode> initializers
token semi1
Expression stopExpr
token semi2
separated_list<Expression> steps
token closeParen
Statement statement

ForeachLoopList
token openParen
Name arrayName
token openBracket
separated_list<Name> loopVariables
token closeBracket
token closeParen

ForeachLoopStatement base=Statement
token keyword
ForeachLoopList loopList
Statement statement

ReturnStatement base=Statement
token returnKeyword
Expression? returnValue
token semi

JumpStatement base=Statement
token breakOrContinue
token semi

TimingControlStatement base=Statement
TimingControl timingControl
Statement statement

ExpressionStatement base=Statement
Expression expr
token semi

VoidCastedCallStatement base=Statement
token voidKeyword
token apostrophe
token openParen
Expression expr
token closeParen
token semi

ProceduralAssignStatement base=Statement multiKind=true
token keyword
Expression lvalue
token equals
Expression value
token semi

kindmap<ProceduralAssignStatement>
ProceduralAssignStatement ProceduralForceStatement

ProceduralDeassignStatement base=Statement multiKind=true
token keyword
Expression variable
token semi

kindmap<ProceduralDeassignStatement>
ProceduralDeassignStatement ProceduralReleaseStatement

DisableStatement base=Statement
token disable
Name name
token semi

DisableForkStatement base=Statement
token disable
token fork
token semi

NamedBlockClause
token colon
token name

BlockStatement base=Statement multiKind=true
token begin
NamedBlockClause? blockName
list<SyntaxNode> items
token end
NamedBlockClause? endBlockName

kindmap<BlockStatement>
SequentialBlockStatement ParallelBlockStatement

WaitStatement base=Statement
token wait
token openParen
Expression expr
token closeParen
Statement statement

WaitForkStatement base=Statement
token wait
token fork
token semi

WaitOrderStatement base=Statement
token wait_order
token openParen
separated_list<Name> names
token closeParen
ActionBlock action

RandCaseItem
Expression expr
token colon
Statement statement

RandCaseStatement base=Statement
token randCase
list<RandCaseItem> items
token endCase

EventTriggerStatement base=Statement multiKind=true
token trigger
TimingControl? timing
Name name
token semi

kindmap<EventTriggerStatement>
BlockingEventTriggerStatement NonblockingEventTriggerStatement

// ----- MODULES -----

PortList final=false
empty

NonAnsiPort final=false
empty

PortExpression final=false
empty

PortReference base=PortExpression
token name
ElementSelect? select

PortConcatenation base=PortExpression
token openBrace
separated_list<PortReference> references
token closeBrace

ImplicitNonAnsiPort base=NonAnsiPort
PortExpression? expr

ExplicitNonAnsiPort base=NonAnsiPort
token dot
token name
token openParen
PortExpression? expr
token closeParen

NonAnsiPortList base=PortList
token openParen
separated_list<NonAnsiPort> ports
token closeParen

InterfacePortHeader base=PortHeader
token nameOrKeyword
DotMemberClause? modport

VariablePortHeader base=PortHeader
token constKeyword
token direction
token varKeyword
DataType dataType

InterconnectPortHeader base=PortHeader
token direction
token interconnect
ImplicitType type

NetPortHeader base=PortHeader
token direction
token netType
DataType dataType

ImplicitAnsiPort base=Member
PortHeader header
Declarator declarator

ExplicitAnsiPort base=Member
token direction
token dot
token name
token openParen
Expression? expr
token closeParen

AnsiPortList base=PortList
token openParen
separated_list<Member> ports
token closeParen

WildcardPortList base=PortList
token openParen
token dotStar
token closeParen

ParameterPortList
token hash
token openParen
separated_list<ParameterDeclarationBase> declarations
token closeParen

ModuleHeader multiKind=true
token moduleKeyword
token lifetime
token name
list<PackageImportDeclaration> imports
ParameterPortList? parameters
PortList? ports
token semi

kindmap<ModuleHeader>
ModuleHeader ProgramHeader InterfaceHeader PackageHeader

ModuleDeclaration base=Member multiKind=true
ModuleHeader header
list<Member> members
token endmodule
NamedBlockClause? blockName

kindmap<ModuleDeclaration>
ModuleDeclaration InterfaceDeclaration ProgramDeclaration PackageDeclaration

ExternModule
token externKeyword
ModuleHeader header

// ----- MEMBERS -----

EmptyMember base=Member
tokenlist qualifiers
token semi

ProceduralBlock base=Member multiKind=true
token keyword
Statement statement

kindmap<ProceduralBlock>
InitialBlock FinalBlock AlwaysBlock AlwaysCombBlock AlwaysFFBlock AlwaysLatchBlock

GenerateRegion base=Member
token keyword
list<Member> members
token endgenerate

LoopGenerate base=Member
token keyword
token openParen
token genvar
token identifier
token equals
Expression initialExpr
token semi1
Expression stopExpr
token semi2
Expression iterationExpr
token closeParen
Member block

IfGenerate base=Member
token keyword
token openParen
Expression condition
token closeParen
Member block
ElseClause? elseClause

CaseGenerate base=Member
token keyword
token openParen
Expression condition
token closeParen
list<CaseItem> items
token endCase

GenerateBlock base=Member
NamedLabel? label
token begin
NamedBlockClause? beginName
list<Member> members
token end
NamedBlockClause? endName

DividerClause
token divide
token value

TimeUnitsDeclaration base=Member
token keyword
token time
DividerClause? divider
token semi

PortConnection final=false
list<AttributeInstance> attributes

EmptyPortConnection base=PortConnection
token placeholder

OrderedPortConnection base=PortConnection
Expression expr

NamedPortConnection base=PortConnection
token dot
token name
token openParen
Expression? expr
token closeParen

WildcardPortConnection base=PortConnection
token dotStar

HierarchicalInstance
token name
list<VariableDimension> dimensions
token openParen
separated_list<PortConnection> connections
token closeParen

HierarchyInstantiation base=Member
token type
ParameterValueAssignment? parameters
separated_list<HierarchicalInstance> instances
token semi

BindTargetList
token colon
separated_list<Name> targets

BindDirective base=Member
token bind
Name target
BindTargetList? targetInstances
HierarchyInstantiation instantiation

GateInstanceName
token name
list<VariableDimension> dimensions

GateInstance
GateInstanceName? decl
token openParen
separated_list<Expression> connections
token closeParen

GateInstantiation base=Member
token gateType
DriveStrength? strength
TimingControl? delay
separated_list<GateInstance> instances
token semi

FunctionPort
list<AttributeInstance> attributes
token constKeyword
token direction
token varKeyword
DataType? dataType
Declarator declarator

FunctionPortList
token openParen
separated_list<FunctionPort> ports
token closeParen

FunctionPrototype
token keyword
token lifetime
DataType returnType
Name name
FunctionPortList? portList

FunctionDeclaration base=Member multiKind=true
FunctionPrototype prototype
token semi
list<SyntaxNode> items
token end
NamedBlockClause? endBlockName

kindmap<FunctionDeclaration>
FunctionDeclaration TaskDeclaration

AssertionItemPort
list<AttributeInstance> attributes
token local
token direction
DataType type
Declarator declarator

AssertionItemPortList
token openParen
separated_list<AssertionItemPort> ports
token closeParen

LetDeclaration base=Member
token let
token identifier
AssertionItemPortList? portList
EqualsValueClause initializer
token semi

PropertyDeclaration base=Member
token keyword
token name
AssertionItemPortList? portList
token semi
list<Member> assertionVariables
PropertySpec propertySpec
token optionalSemi
token end
NamedBlockClause? endBlockName

SequenceDeclaration base=Member
token keyword
token name
AssertionItemPortList? portList
token semi
list<Member> assertionVariables
Expression seqExpr
token optionalSemi
token end
NamedBlockClause? endBlockName

ExtendsClause
token keyword
Name baseName
ArgumentList? arguments

ImplementsClause
token keyword
separated_list<Name> interfaces

ClassDeclaration base=Member
token virtualOrInterface
token classKeyword
token lifetime
token name
ParameterPortList? parameters
ExtendsClause? extendsClause
ImplementsClause? implementsClause
token semi
list<Member> items
token endClass
NamedBlockClause? endBlockName

ClassPropertyDeclaration base=Member
tokenlist qualifiers
Member declaration

ClassMethodDeclaration base=Member
tokenlist qualifiers
FunctionDeclaration declaration

ClassMethodPrototype base=Member
tokenlist qualifiers
FunctionPrototype prototype
token semi

ContinuousAssign base=Member
token assign
DriveStrength? strength
TimingControl? delay
separated_list<Expression> assignments
token semi

DefParamAssignment
Name name
EqualsValueClause? setter

DefParam base=Member
token defparam
separated_list<DefParamAssignment> assignments
token semi

ModportClockingPort base=Member
token clocking
token name

ModportPort final=false
empty

ModportNamedPort base=ModportPort
token name

ModportExplicitPort base=ModportPort
token dot
token name
token openParen
Expression? expr
token closeParen

ModportSimplePortList base=Member
token direction
separated_list<ModportPort> ports

ModportSubroutinePort base=ModportPort
FunctionPrototype prototype

ModportSubroutinePortList base=Member
token importExport
separated_list<ModportPort> ports

ModportItem
token name
AnsiPortList ports

ModportDeclaration base=Member
token keyword
separated_list<ModportItem> items
token semi

ClockingSkew
token edge
Delay? delay

ClockingDirection
token input
ClockingSkew? inputSkew
token output
ClockingSkew? ouputSkew

DefaultSkewItem base=Member
token keyword
ClockingDirection direction
token semi

ClockingItem base=Member
ClockingDirection direction
separated_list<AttributeSpec> decls
token semi

ClockingDeclaration base=Member
token globalOrDefault
token clocking
token blockName
token at
EventExpression event
token semi
list<Member> items
token endClocking
NamedBlockClause? endBlockName

DefaultClockingReference base=Member
token defaultKeyword
token clocking
token name
token semi

DPIImport base=Member
token keyword
token specString
token property
token c_identifier
token equals
FunctionPrototype method
token semi

DPIExport base=Member
token keyword
token specString
token c_identifier
token equals
token functionOrTask
token name
token semi

ElabSystemTask base=Member
token name
ArgumentList? arguments
token semi

// ----- CONSTRAINTS -----

ConstraintItem final=false
empty

DistWeight
token op
Expression expr

DistItem
Expression range
DistWeight? weight

DistConstraintList
token dist
token openBrace
separated_list<DistItem> items
token closeBrace

ExpressionOrDist base=Expression
Expression expr
DistConstraintList distribution

ExpressionConstraint base=ConstraintItem
token soft
Expression expr
token semi

UniquenessConstraint base=ConstraintItem
token unique
OpenRangeList ranges
token semi

ImplicationConstraint base=ConstraintItem
Expression left
token arrow
ConstraintItem constraints

ElseConstraintClause
token elseKeyword
ConstraintItem constraints

ConditionalConstraint base=ConstraintItem
token ifKeyword
token openParen
Expression condition
token closeParen
ConstraintItem constraints
ElseConstraintClause? elseClause

LoopConstraint base=ConstraintItem
token foreachKeyword
ForeachLoopList loopList
ConstraintItem constraints

DisableConstraint base=ConstraintItem
token disable
token soft
Name name
token semi

SolveBeforeConstraint base=ConstraintItem
token solve
separated_list<Expression> beforeExpr
token before
separated_list<Expression> afterExpr
token semi

ConstraintBlock base=ConstraintItem
token openBrace
list<ConstraintItem> items
token closeBrace

ConstraintPrototype base=Member
tokenlist qualifiers
token keyword
Name name
token semi

ConstraintDeclaration base=Member
tokenlist qualifiers
token keyword
Name name
ConstraintBlock block

ParenExpressionList
token openParen
separated_list<Expression> expressions
token closeParen

ArrayOrRandomizeMethodExpression base=Expression
Expression method
token with
ParenExpressionList? args
ConstraintBlock? constraints

// ----- COVER GROUPS -----

WithFunctionSample
token with
token function
token sample
AnsiPortList portList

BlockEventExpression final=false
empty

BinaryBlockEventExpression base=BlockEventExpression
BlockEventExpression left
token orKeyword
BlockEventExpression right

PrimaryBlockEventExpression base=BlockEventExpression
token keyword
Name name

BlockCoverageEvent
token atat
token openParen
BlockEventExpression expr
token closeParen

CovergroupDeclaration base=Member
token covergroup
token name
AnsiPortList? portList
SyntaxNode? event
token semi
list<Member> members
token endgroup
NamedBlockClause? endBlockName

CoverageOption base=Member
token option
token dot
token name
token equals
Expression expr
token semi

Coverpoint base=Member
DataType? type
NamedLabel? label
token coverpoint
Expression expr
token openBrace
list<Member> members
token closeBrace
token emptySemi

CoverageBinInitializer final=false
empty

DefaultCoverageBinInitializer base=CoverageBinInitializer
token defaultKeyword
token sequenceKeyword

WithClause
token with
token openParen
Expression expr
token closeParen

ExpressionCoverageBinInitializer base=CoverageBinInitializer
Expression expr
WithClause? withClause

RangeCoverageBinInitializer base=CoverageBinInitializer
OpenRangeList ranges
WithClause? withClause

TransRepeatRange
token openBracket
token specifier
Selector? selector
token closeBracket

TransRange
separated_list<Expression> items
TransRepeatRange? repeat

TransSet
token openParen
separated_list<TransRange> ranges
token closeParen

TransListCoverageBinInitializer base=CoverageBinInitializer
separated_list<TransSet> sets
WithClause? withClause

CoverageIffClause
token iff
token openParen
Expression expr
token closeParen

CoverageBins base=Member
token wildcard
token keyword
token name
ElementSelect? selector
token equals
CoverageBinInitializer initializer
CoverageIffClause? iff
token semi

// ----- TOP LEVEL -----

CompilationUnit
list<Member> members
token endOfFile

// ----- DIRECTIVES -----

Directive final=false
token directive

SimpleDirective base=Directive multiKind=true

kindmap<SimpleDirective>
CellDefineDirective NoUnconnectedDriveDirective EndCellDefineDirective EndKeywordsDirective
ResetAllDirective UndefineAllDirective

IncludeDirective base=Directive
token fileName

ConditionalBranchDirective base=Directive multiKind=true
token name
tokenlist disabledTokens

kindmap<ConditionalBranchDirective>
ElsIfDirective IfDefDirective IfNDefDirective

UnconditionalBranchDirective base=Directive multiKind=true
tokenlist disabledTokens

kindmap<UnconditionalBranchDirective>
EndIfDirective ElseDirective

MacroArgumentDefault
token equals
tokenlist tokens

MacroFormalArgument
token name
MacroArgumentDefault? defaultValue

MacroFormalArgumentList
token openParen
separated_list<MacroFormalArgument> args
token closeParen

DefineDirective base=Directive
token name
MacroFormalArgumentList? formalArguments
tokenlist body

MacroActualArgument
tokenlist tokens

MacroActualArgumentList
token openParen
separated_list<MacroActualArgument> args
token closeParen

MacroUsage base=Directive
MacroActualArgumentList? args

TimeScaleDirective base=Directive
token timeUnit
token slash
token timePrecision

DefaultNetTypeDirective base=Directive
token netType

UnconnectedDriveDirective base=Directive
token strength

LineDirective base=Directive
token lineNumber
token fileName
token level

UndefDirective base=Directive
token name

BeginKeywordsDirective base=Directive
token versionSpecifier

PragmaExpression final=false
empty

SimplePragmaExpression base=PragmaExpression
token value

NameValuePragmaExpression base=PragmaExpression
token name
token equals
PragmaExpression value

NumberPragmaExpression base=PragmaExpression
token size
token base
token value

ParenPragmaExpression base=PragmaExpression
token openParen
separated_list<PragmaExpression> values
token closeParen

PragmaDirective base=Directive
token name
separated_list<PragmaExpression> args
