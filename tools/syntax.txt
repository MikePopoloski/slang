ExpressionSyntax final=false
empty

DataTypeSyntax base=ExpressionSyntax final=false
empty

// ----- ATTRIBUTES -----

EqualsValueClauseSyntax kind=EqualsValueClause
token equals
ExpressionSyntax expr

AttributeSpecSyntax kind=AttributeSpec
token name
EqualsValueClauseSyntax value

AttributeInstanceSyntax kind=AttributeInstance
token openParen
separated_list<AttributeSpecSyntax> specs
token closeParen

NamedLabelSyntax kind=NamedLabel
token name
token colon

StatementSyntax final=false
NamedLabelSyntax label
list<AttributeInstanceSyntax> attributes

MemberSyntax final=false
list<AttributeInstanceSyntax> attributes

// ----- ARGUMENTS -----

ArgumentSyntax final=false
empty

OrderedArgumentSyntax base=ArgumentSyntax kind=OrderedArgument
ExpressionSyntax expr

NamedArgumentSyntax base=ArgumentSyntax kind=NamedArgument
token dot
token name
token openParen
ExpressionSyntax expr
token closeParen

ArgumentListSyntax kind=ArgumentList
token openParen
separated_list<ArgumentSyntax> parameters
token closeParen

ParameterValueAssignmentSyntax kind=ParameterValueAssignment
token hash
ArgumentListSyntax parameters

// ----- PATTERNS -----

PatternSyntax final=false
empty

VariablePatternSyntax base=PatternSyntax kind=VariablePattern
token dot
token variableName

WildcardPatternSyntax base=PatternSyntax kind=WildcardPattern
token dotStar

ExpressionPatternSyntax base=PatternSyntax kind=ExpressionPattern
ExpressionSyntax expr

TaggedPatternSyntax base=PatternSyntax kind=TaggedPattern
token tagged
token memberName
PatternSyntax pattern

StructurePatternMemberSyntax final=false
empty

OrderedStructurePatternMemberSyntax base=StructurePatternMemberSyntax kind=OrderedStructurePatternMember
PatternSyntax pattern

NamedStructurePatternMemberSyntax base=StructurePatternMemberSyntax kind=NamedStructurePatternMember
token name
token colon
PatternSyntax pattern

StructurePatternSyntax base=PatternSyntax kind=StructurePattern
token openBrace
separated_list<StructurePatternMemberSyntax> members
token closeBrace

MatchesClauseSyntax kind=MatchesClause
token matchesKeyword
PatternSyntax pattern

ConditionalPatternSyntax kind=ConditionalPattern
ExpressionSyntax expr
MatchesClauseSyntax matchesClause

ConditionalPredicateSyntax kind=ConditionalPredicate
separated_list<ConditionalPatternSyntax> conditions

AssignmentPatternSyntax final=false
empty

SimpleAssignmentPatternSyntax base=AssignmentPatternSyntax kind=SimpleAssignmentPattern
token openBrace
separated_list<ExpressionSyntax> items
token closeBrace

AssignmentPatternItemSyntax kind=AssignmentPatternItem
ExpressionSyntax key
token colon
ExpressionSyntax expr

StructuredAssignmentPatternSyntax base=AssignmentPatternSyntax kind=StructuredAssignmentPattern
token openBrace
separated_list<AssignmentPatternItemSyntax> items
token closeBrace

ReplicatedAssignmentPatternSyntax base=AssignmentPatternSyntax kind=ReplicatedAssignmentPattern
token openBrace
ExpressionSyntax countExpr
token innerOpenBrace
separated_list<ExpressionSyntax> items
token innerCloseBrace
token closeBrace

// ----- EXPRESSIONS -----

BadExpressionSyntax base=ExpressionSyntax kind=BadExpression
ExpressionSyntax expr

PrimaryExpressionSyntax base=ExpressionSyntax final=false
empty

PrefixUnaryExpressionSyntax base=ExpressionSyntax
token operatorToken
list<AttributeInstanceSyntax> attributes
ExpressionSyntax operand

kindmap<PrefixUnaryExpressionSyntax>
UnaryPlusExpression UnaryMinusExpression UnaryBitwiseAndExpression
UnaryBitwiseNandExpression UnaryBitwiseOrExpression UnaryBitwiseNorExpression
UnaryBitwiseXorExpression UnaryBitwiseXnorExpression UnaryPreincrementExpression
UnaryPredecrementExpression UnaryLogicalNotExpression UnaryBitwiseNotExpression
UnarySequenceDelayExpression UnarySequenceEventExpression UnaryNotPropertyExpression
AcceptOnPropertyExpression RejectOnPropertyExpression SyncAcceptOnPropertyExpression
SyncRejectOnPropertyExpression NextTimePropertyExpression SNextTimePropertyExpression
AlwaysPropertyExpression SAlwaysPropertyExpression EventuallyPropertyExpression
SEventuallyPropertyExpression

PostfixUnaryExpressionSyntax base=ExpressionSyntax
ExpressionSyntax operand
list<AttributeInstanceSyntax> attributes
token operatorToken

kindmap<PostfixUnaryExpressionSyntax>
PostincrementExpression PostdecrementExpression

BinaryExpressionSyntax base=ExpressionSyntax
ExpressionSyntax left
token operatorToken
list<AttributeInstanceSyntax> attributes
ExpressionSyntax right

kindmap<BinaryExpressionSyntax>
AddExpression SubtractExpression MultiplyExpression DivideExpression PowerExpression
ModExpression EqualityExpression InequalityExpression CaseEqualityExpression
CaseInequalityExpression WildcardEqualityExpression WildcardInequalityExpression
LessThanExpression LessThanEqualExpression GreaterThanExpression GreaterThanEqualExpression
LogicalAndExpression LogicalOrExpression BinaryAndExpression BinaryOrExpression
BinaryXorExpression BinaryXnorExpression LogicalImplicationExpression
LogicalEquivalenceExpression LogicalShiftLeftExpression LogicalShiftRightExpression
ArithmeticShiftLeftExpression ArithmeticShiftRightExpression BinarySequenceDelayExpression
OrSequenceExpression AndSequenceExpression IntersectSequenceExpression
WithinSequenceExpression ThroughoutSequenceExpression IffPropertyExpression
UntilPropertyExpression SUntilPropertyExpression UntilWithPropertyExpression
SUntilWithPropertyExpression ImpliesPropertyExpression
OverlappedImplicationPropertyExpression NonOverlappedImplicationPropertyExpression
OverlappedFollowedByPropertyExpression NonOverlappedFollowedByPropertyExpression
AssignmentExpression AddAssignmentExpression SubtractAssignmentExpression
MultiplyAssignmentExpression DivideAssignmentExpression ModAssignmentExpression
AndAssignmentExpression OrAssignmentExpression XorAssignmentExpression
LogicalLeftShiftAssignmentExpression LogicalRightShiftAssignmentExpression
ArithmeticLeftShiftAssignmentExpression ArithmeticRightShiftAssignmentExpression
NonblockingAssignmentExpression

MinTypMaxExpressionSyntax base=ExpressionSyntax kind=MinTypMaxExpression
ExpressionSyntax min
token colon1
ExpressionSyntax typ
token colon2
ExpressionSyntax max

TaggedUnionExpressionSyntax base=ExpressionSyntax kind=TaggedUnionExpression
token tagged
token member
ExpressionSyntax expr

OpenRangeListSyntax kind=OpenRangeList
token openBrace
separated_list<ExpressionSyntax> valueRanges
token closeBrace

InsideExpressionSyntax base=ExpressionSyntax kind=InsideExpression
ExpressionSyntax expr
token inside
OpenRangeListSyntax ranges

ConditionalExpressionSyntax base=ExpressionSyntax kind=ConditionalExpression
ConditionalPredicateSyntax predicate
token question
list<AttributeInstanceSyntax> attributes
ExpressionSyntax left
token colon
ExpressionSyntax right

AssignmentPatternExpressionSyntax base=PrimaryExpressionSyntax kind=AssignmentPatternExpression
DataTypeSyntax type
AssignmentPatternSyntax pattern

// ----- SELECTORS -----

SelectorSyntax final=false
empty

BitSelectSyntax base=SelectorSyntax kind=BitSelect
ExpressionSyntax expr

RangeSelectSyntax base=SelectorSyntax
ExpressionSyntax left
token range
ExpressionSyntax right

kindmap<RangeSelectSyntax>
SimpleRangeSelect AscendingRangeSelect DescendingRangeSelect

ElementSelectSyntax base=ExpressionSyntax kind=ElementSelect
token openBracket
SelectorSyntax selector
token closeBracket

// ----- NAMES -----

NameSyntax base=ExpressionSyntax final=false
empty

IdentifierNameSyntax base=NameSyntax kind=IdentifierName
token identifier

IdentifierSelectNameSyntax base=NameSyntax kind=IdentifierSelectName
token identifier
list<ElementSelectSyntax> selectors

EmptyIdentifierNameSyntax base=NameSyntax kind=EmptyIdentifierName
empty

KeywordNameSyntax base=NameSyntax
token keyword

kindmap<KeywordNameSyntax>
LocalScope UnitScope RootScope ThisHandle SuperHandle ArrayUniqueMethod
ArrayAndMethod ArrayOrMethod ArrayXorMethod ConstructorName SystemName

ClassNameSyntax base=NameSyntax kind=ClassName
token identifier
ParameterValueAssignmentSyntax parameters

ScopedNameSyntax base=NameSyntax kind=ScopedName
NameSyntax left
token separator
NameSyntax right

ClassScopeSyntax base=NameSyntax kind=ClassScope
NameSyntax left
token separator

// ----- PRIMARY EXPRESSIONS -----

LiteralExpressionSyntax base=PrimaryExpressionSyntax
token literal

kindmap<LiteralExpressionSyntax>
NullLiteralExpression StringLiteralExpression IntegerLiteralExpression
UnbasedUnsizedLiteralExpression RealLiteralExpression
TimeLiteralExpression WildcardLiteralExpression OneStepLiteralExpression
DefaultPatternKeyExpression

IntegerVectorExpressionSyntax base=PrimaryExpressionSyntax kind=IntegerVectorExpression
token size
token base
token value

EmptyQueueExpressionSyntax base=PrimaryExpressionSyntax kind=EmptyQueueExpression
token openBrace
token closeBrace

ConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=ConcatenationExpression
token openBrace
separated_list<ExpressionSyntax> expressions
token closeBrace

MultipleConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=MultipleConcatenationExpression
token openBrace
ExpressionSyntax expression
ConcatenationExpressionSyntax concatenation
token closeBrace

StreamExpressionWithRange kind=StreamExpressionWithRange
token withKeyword
ElementSelectSyntax range

StreamExpressionSyntax kind=StreamExpression
ExpressionSyntax expression
StreamExpressionWithRange withRange

StreamingConcatenationExpressionSyntax base=PrimaryExpressionSyntax kind=StreamingConcatenationExpression
token openBrace
token operatorToken
ExpressionSyntax sliceSize
token innerOpenBrace
separated_list<StreamExpressionSyntax> expressions
token innerCloseBrace
token closeBrace

ParenthesizedExpressionSyntax base=PrimaryExpressionSyntax kind=ParenthesizedExpression
token openParen
ExpressionSyntax expression
token closeParen

NewClassExpressionSyntax base=ExpressionSyntax kind=NewClassExpression
ClassScopeSyntax classScope
token newKeyword
ArgumentListSyntax arguments

NewArrayExpressionSyntax base=ExpressionSyntax kind=NewArrayExpression
token newKeyword
token openBracket
ExpressionSyntax sizeExpr
token closeBracket
ParenthesizedExpressionSyntax initializer

NewExpressionSyntax base=ExpressionSyntax kind=NewExpression
token newKeyword
ExpressionSyntax expr

// ----- POSTFIX EXPRESSIONS -----

ElementSelectExpressionSyntax base=ExpressionSyntax kind=ElementSelectExpression
ExpressionSyntax left
ElementSelectSyntax select

MemberAccessExpressionSyntax base=ExpressionSyntax kind=MemberAccessExpression
ExpressionSyntax left
token dot
token name

InvocationExpressionSyntax base=ExpressionSyntax kind=InvocationExpression
ExpressionSyntax left
list<AttributeInstanceSyntax> attributes
ArgumentListSyntax arguments

CastExpressionSyntax base=ExpressionSyntax kind=CastExpression
ExpressionSyntax left
token apostrophe
ParenthesizedExpressionSyntax right

SignedCastExpressionSyntax base=ExpressionSyntax kind=SignedCastExpression
token signing
token apostrophe
ParenthesizedExpressionSyntax inner

// ----- TIMING CONTROL -----

TimingControlSyntax final=false
empty

DelaySyntax base=TimingControlSyntax
token hash
ExpressionSyntax delayValue

kindmap<DelaySyntax>
DelayControl CycleDelay

EventControlSyntax base=TimingControlSyntax kind=EventControl
token at
NameSyntax eventName

EventExpressionSyntax final=false
empty

SignalEventExpressionSyntax base=EventExpressionSyntax kind=SignalEventExpression
token edge
ExpressionSyntax expr

BinaryEventExpressionSyntax base=EventExpressionSyntax kind=BinaryEventExpression
EventExpressionSyntax left
token operatorToken
EventExpressionSyntax right

ParenthesizedEventExpressionSyntax base=EventExpressionSyntax kind=ParenthesizedEventExpression
token openParen
EventExpressionSyntax expr
token closeParen

ImplicitEventControlSyntax base=TimingControlSyntax kind=ImplicitEventControl
token atStar

ParenImplicitEventControlSyntax base=TimingControlSyntax kind=ParenImplicitEventControl
token at
token openParenStarCloseParen

EventControlWithExpressionSyntax base=TimingControlSyntax kind=EventControlWithExpression
token at
EventExpressionSyntax expr

RepeatedEventControlSyntax base=TimingControlSyntax kind=RepeatedEventControl
token repeat
token openParen
ExpressionSyntax expr
token closeParen
TimingControlSyntax eventControl

TimingControlExpressionSyntax base=ExpressionSyntax kind=TimingControlExpression
TimingControlSyntax timing
ExpressionSyntax expr

ShortcutCycleDelayRangeSyntax base=TimingControlSyntax kind=ShortcutCycleDelayRange
token doubleHash
token openBracket
token op
token closeBracket

// ----- DECLARATIONS -----

DimensionSpecifierSyntax final=false
empty

RangeDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=RangeDimensionSpecifier
SelectorSyntax selector

DataTypeDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=DataTypeDimensionSpecifier
DataTypeSyntax type

WildcardDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=WildcardDimensionSpecifier
token star

ColonExpressionClauseSyntax kind=ColonExpressionClause
token colon
ExpressionSyntax expr

QueueDimensionSpecifierSyntax base=DimensionSpecifierSyntax kind=QueueDimensionSpecifier
token dollar
ColonExpressionClauseSyntax maxSizeClause

VariableDimensionSyntax kind=VariableDimension
token openBracket
DimensionSpecifierSyntax specifier
token closeBracket

VariableDeclaratorSyntax kind=VariableDeclarator
token name
list<VariableDimensionSyntax> dimensions
EqualsValueClauseSyntax initializer

DataDeclarationSyntax base=MemberSyntax kind=DataDeclaration
tokenlist modifiers
DataTypeSyntax type
separated_list<VariableDeclaratorSyntax> declarators
token semi

TypedefDeclarationSyntax base=MemberSyntax kind=TypedefDeclaration
token typedefKeyword
DataTypeSyntax type
token name
list<VariableDimensionSyntax> dimensions
token semi

TypedefKeywordDeclarationSyntax base=MemberSyntax kind=TypedefKeywordDeclaration
token typedefKeyword
token keyword
token name
token semi

TypedefInterfaceClassDeclarationSyntax base=MemberSyntax kind=TypedefInterfaceClassDeclaration
token typedefKeyword
token interfaceKeyword
token classKeyword
token name
token semi

NetStrengthSyntax final=false
empty

ChargeStrengthSyntax base=NetStrengthSyntax kind=ChargeStrength
token openParen
token strength
token closeParen

DriveStrengthSyntax base=NetStrengthSyntax kind=DriveStrength
token openParen
token strength0
token comma
token strength1
token closeParen

NetDeclarationSyntax base=MemberSyntax kind=NetDeclaration
token netType
NetStrengthSyntax strength
token expansionHint
DataTypeSyntax type
separated_list<VariableDeclaratorSyntax> declarators
token semi

PackageImportItemSyntax kind=PackageImportItem
token package
token doubleColon
token item

PackageImportDeclarationSyntax base=MemberSyntax kind=PackageImportDeclaration
token keyword
separated_list<PackageImportItemSyntax> items
token semi

ParameterDeclarationSyntax kind=ParameterDeclaration
token keyword
DataTypeSyntax type
separated_list<VariableDeclaratorSyntax> declarators

ParameterDeclarationStatementSyntax base=MemberSyntax kind=ParameterDeclarationStatement
ParameterDeclarationSyntax parameter
token semi

PortHeaderSyntax final=false
empty

PortDeclarationSyntax base=MemberSyntax kind=PortDeclaration
PortHeaderSyntax header
separated_list<VariableDeclaratorSyntax> declarators
token semi

GenvarDeclarationSyntax base=MemberSyntax kind=GenvarDeclaration
token keyword
separated_list<IdentifierNameSyntax> identifiers
token semi

// ----- TYPES -----

IntegerTypeSyntax base=DataTypeSyntax
token keyword
token signing
list<VariableDimensionSyntax> dimensions

kindmap<IntegerTypeSyntax>
BitType LogicType RegType ByteType ShortIntType IntType LongIntType
IntegerType TimeType

KeywordTypeSyntax base=DataTypeSyntax
token keyword

kindmap<KeywordTypeSyntax>
ShortRealType RealType RealTimeType StringType CHandleType EventType
VoidType TypeType Untyped PropertyType SequenceType

NamedTypeSyntax base=DataTypeSyntax kind=NamedType
NameSyntax name

StructUnionMemberSyntax kind=StructUnionMember
list<AttributeInstanceSyntax> attributes
token randomQualifier
DataTypeSyntax type
separated_list<VariableDeclaratorSyntax> declarators
token semi

StructUnionTypeSyntax base=DataTypeSyntax
token keyword
token tagged
token packed
token signing
token openBrace
list<StructUnionMemberSyntax> members
token closeBrace
list<VariableDimensionSyntax> dimensions

kindmap<StructUnionTypeSyntax>
StructType UnionType

EnumTypeSyntax base=DataTypeSyntax kind=EnumType
token keyword
DataTypeSyntax baseType
token openBrace
separated_list<VariableDeclaratorSyntax> members
token closeBrace
list<VariableDimensionSyntax> dimensions

TypeReferenceSyntax base=DataTypeSyntax kind=TypeReference
token typeKeyword
token openParen
ExpressionSyntax expr
token closeParen

DotMemberClauseSyntax kind=DotMemberClause
token dot
token member

VirtualInterfaceTypeSyntax base=DataTypeSyntax kind=VirtualInterfaceType
token virtualKeyword
token interfaceKeyword
token name
ParameterValueAssignmentSyntax parameters
DotMemberClauseSyntax modport

ImplicitTypeSyntax base=DataTypeSyntax kind=ImplicitType
token signing
list<VariableDimensionSyntax> dimensions

VarDataTypeSyntax base=DataTypeSyntax kind=VarDataType
token var
DataTypeSyntax type

// ----- ASSERTIONS -----

DeferredAssertionSyntax kind=DeferredAssertion
token hash
token zero
token finalKeyword

ElseClauseSyntax kind=ElseClause
token elseKeyword
SyntaxNode clause

ActionBlockSyntax kind=ActionBlock
StatementSyntax statement
ElseClauseSyntax elseClause

ImmediateAssertionStatementSyntax base=StatementSyntax
token keyword
DeferredAssertionSyntax delay
ParenthesizedExpressionSyntax expr
ActionBlockSyntax action

kindmap<ImmediateAssertionStatementSyntax>
ImmediateAssertStatement ImmediateAssumeStatement ImmediateCoverStatement

DisableIffSyntax kind=DisableIff
token disable
token iff
token openParen
ExpressionSyntax expr
token closeParen

PropertySpecSyntax kind=PropertySpec
TimingControlSyntax clocking
DisableIffSyntax disable
ExpressionSyntax expr

ConcurrentAssertionStatementSyntax base=StatementSyntax
token keyword
token propertyOrSequence
token openParen
PropertySpecSyntax propertySpec
token closeParen
ActionBlockSyntax action

kindmap<ConcurrentAssertionStatementSyntax>
AssertPropertyStatement AssumePropertyStatement CoverSequenceStatement
CoverPropertyStatement RestrictPropertyStatement ExpectPropertyStatement

ConcurrentAssertionMemberSyntax base=MemberSyntax kind=ConcurrentAssertionMember
ConcurrentAssertionStatementSyntax statement

ImmediateAssertionMemberSyntax base=MemberSyntax kind=ImmediateAssertionMember
ImmediateAssertionStatementSyntax statement

// ----- STATEMENTS -----

EmptyStatementSyntax base=StatementSyntax kind=EmptyStatement
token semicolon

ConditionalStatementSyntax base=StatementSyntax kind=ConditionalStatement
token uniqueOrPriority
token ifKeyword
token openParen
ConditionalPredicateSyntax predicate
token closeParen
StatementSyntax statement
ElseClauseSyntax elseClause

CaseItemSyntax final=false
empty

DefaultCaseItemSyntax base=CaseItemSyntax kind=DefaultCaseItem
token defaultKeyword
token colon
SyntaxNode clause

PatternCaseItemSyntax base=CaseItemSyntax kind=PatternCaseItem
PatternSyntax pattern
token tripleAnd
ExpressionSyntax expr
token colon
StatementSyntax statement

StandardCaseItemSyntax base=CaseItemSyntax kind=StandardCaseItem
separated_list<ExpressionSyntax> expressions
token colon
SyntaxNode clause

CaseStatementSyntax base=StatementSyntax kind=CaseStatement
token uniqueOrPriority
token caseKeyword
token openParen
ExpressionSyntax expr
token closeParen
token matchesOrInside
list<CaseItemSyntax> items
token endcase

ForeverStatementSyntax base=StatementSyntax kind=ForeverStatement
token foreverKeyword
StatementSyntax statement

LoopStatementSyntax base=StatementSyntax kind=LoopStatement
token repeatOrWhile
token openParen
ExpressionSyntax expr
token closeParen
StatementSyntax statement

DoWhileStatementSyntax base=StatementSyntax kind=DoWhileStatement
token doKeyword
StatementSyntax statement
token whileKeyword
token openParen
ExpressionSyntax expr
token closeParen
token semi

ForVariableDeclarationSyntax kind=ForVariableDeclaration
token varKeyword
DataTypeSyntax type
VariableDeclaratorSyntax declarator

ForLoopStatementSyntax base=StatementSyntax kind=ForLoopStatement
token forKeyword
token openParen
separated_list<SyntaxNode> initializers
token semi1
ExpressionSyntax stopExpr
token semi2
separated_list<ExpressionSyntax> steps
token closeParen
StatementSyntax statement

ForeachLoopListSyntax kind=ForeachLoopList
token openParen
NameSyntax arrayName
token openBracket
separated_list<NameSyntax> loopVariables
token closeBracket
token closeParen

ForeachLoopStatementSyntax base=StatementSyntax kind=ForeachLoopStatement
token keyword
ForeachLoopListSyntax loopList
StatementSyntax statement

ReturnStatementSyntax base=StatementSyntax kind=ReturnStatement
token returnKeyword
ExpressionSyntax returnValue
token semi

JumpStatementSyntax base=StatementSyntax kind=JumpStatement
token breakOrContinue
token semi

TimingControlStatementSyntax base=StatementSyntax kind=TimingControlStatement
TimingControlSyntax timingControl
StatementSyntax statement

ExpressionStatementSyntax base=StatementSyntax kind=ExpressionStatement
ExpressionSyntax expr
token semi

ProceduralAssignStatementSyntax base=StatementSyntax
token keyword
ExpressionSyntax lvalue
token equals
ExpressionSyntax value
token semi

kindmap<ProceduralAssignStatementSyntax>
ProceduralAssignStatement ProceduralForceStatement

ProceduralDeassignStatementSyntax base=StatementSyntax
token keyword
ExpressionSyntax variable
token semi

kindmap<ProceduralDeassignStatementSyntax>
ProceduralDeassignStatement ProceduralReleaseStatement

DisableStatementSyntax base=StatementSyntax kind=DisableStatement
token disable
NameSyntax name
token semi

DisableForkStatementSyntax base=StatementSyntax kind=DisableForkStatement
token disable
token fork
token semi

NamedBlockClauseSyntax kind=NamedBlockClause
token colon
token name

BlockStatementSyntax base=StatementSyntax
token begin
NamedBlockClauseSyntax blockName
list<SyntaxNode> items
token end
NamedBlockClauseSyntax endBlockName

kindmap<BlockStatementSyntax>
SequentialBlockStatement ParallelBlockStatement

WaitStatementSyntax base=StatementSyntax kind=WaitStatement
token wait
token openParen
ExpressionSyntax expr
token closeParen
StatementSyntax statement

WaitForkStatementSyntax base=StatementSyntax kind=WaitForkStatement
token wait
token fork
token semi

WaitOrderStatementSyntax base=StatementSyntax kind=WaitOrderStatement
token wait_order
token openParen
separated_list<NameSyntax> names
token closeParen
ActionBlockSyntax action

RandCaseItemSyntax kind=RandCaseItem
ExpressionSyntax expr
token colon
StatementSyntax statement

RandCaseStatementSyntax base=StatementSyntax kind=RandCaseStatement
token randCase
list<RandCaseItemSyntax> items
token endCase

EventTriggerStatementSyntax base=StatementSyntax
token trigger
TimingControlSyntax timing
NameSyntax name

kindmap<EventTriggerStatementSyntax>
BlockingEventTriggerStatement NonblockingEventTriggerStatement

// ----- MODULES -----

PortListSyntax final=false
empty

NonAnsiPortSyntax final=false
empty

ImplicitNonAnsiPortSyntax base=NonAnsiPortSyntax kind=ImplicitNonAnsiPort
ExpressionSyntax expr

ExplicitNonAnsiPortSyntax base=NonAnsiPortSyntax kind=ExplicitNonAnsiPort
token dot
token name
token openParen
ExpressionSyntax expr
token closeParen

NonAnsiPortListSyntax base=PortListSyntax kind=NonAnsiPortList
token openParen
separated_list<NonAnsiPortSyntax> ports
token closeParen

AnsiPortSyntax final=false
list<AttributeInstanceSyntax> attributes

InterfacePortHeaderSyntax base=PortHeaderSyntax kind=InterfacePortHeader
token nameOrKeyword
DotMemberClauseSyntax modport

VariablePortHeaderSyntax base=PortHeaderSyntax kind=VariablePortHeader
token direction
token varKeyword
DataTypeSyntax type

InterconnectPortHeaderSyntax base=PortHeaderSyntax kind=InterconnectPortHeader
token direction
token interconnect
DataTypeSyntax type

NetPortHeaderSyntax base=PortHeaderSyntax kind=NetPortHeader
token direction
token netType
DataTypeSyntax dataType

ImplicitAnsiPortSyntax base=AnsiPortSyntax kind=ImplicitAnsiPort
PortHeaderSyntax header
VariableDeclaratorSyntax declarator

ExplicitAnsiPortSyntax base=AnsiPortSyntax kind=ExplicitAnsiPort
token direction
token dot
token name
token openParen
ExpressionSyntax expr
token closeParen

AnsiPortListSyntax base=PortListSyntax kind=AnsiPortList
token openParen
separated_list<MemberSyntax> ports
token closeParen

WildcardPortListSyntax base=PortListSyntax kind=WildcardPortList
token openParen
token dotStar
token closeParen

ParameterPortListSyntax kind=ParameterPortList
token hash
token openParen
separated_list<ParameterDeclarationSyntax> declarations
token closeParen

ModuleHeaderSyntax
token moduleKeyword
token lifetime
token name
list<PackageImportDeclarationSyntax> imports
ParameterPortListSyntax parameters
PortListSyntax ports
token semi

kindmap<ModuleHeaderSyntax>
ModuleHeader ProgramHeader InterfaceHeader PackageHeader

ModuleDeclarationSyntax base=MemberSyntax
ModuleHeaderSyntax header
list<MemberSyntax> members
token endmodule
NamedBlockClauseSyntax blockName

kindmap<ModuleDeclarationSyntax>
ModuleDeclaration InterfaceDeclaration ProgramDeclaration PackageDeclaration

ExternModuleSyntax kind=ExternModule
token externKeyword
ModuleHeaderSyntax header

// ----- MEMBERS -----

EmptyMemberSyntax base=MemberSyntax kind=EmptyMember
tokenlist qualifiers
token semi

ProceduralBlockSyntax base=MemberSyntax
token keyword
StatementSyntax statement

kindmap<ProceduralBlockSyntax>
InitialBlock FinalBlock AlwaysBlock AlwaysCombBlock AlwaysFFBlock AlwaysLatchBlock

GenerateRegionSyntax base=MemberSyntax kind=GenerateRegion
token keyword
list<MemberSyntax> members
token endgenerate

LoopGenerateSyntax base=MemberSyntax kind=LoopGenerate
token keyword
token openParen
token genvar
token identifier
token equals
ExpressionSyntax initialExpr
token semi1
ExpressionSyntax stopExpr
token semi2
ExpressionSyntax iterationExpr
token closeParen
MemberSyntax block

IfGenerateSyntax base=MemberSyntax kind=IfGenerate
token keyword
token openParen
ExpressionSyntax condition
token closeParen
MemberSyntax block
ElseClauseSyntax elseClause

CaseGenerateSyntax base=MemberSyntax kind=CaseGenerate
token keyword
token openParen
ExpressionSyntax condition
token closeParen
list<CaseItemSyntax> items
token endCase

GenerateBlockSyntax base=MemberSyntax kind=GenerateBlock
NamedLabelSyntax label
token begin
NamedBlockClauseSyntax beginName
list<MemberSyntax> members
token end
NamedBlockClauseSyntax endName

DividerClauseSyntax kind=DividerClause
token divide
token value

TimeUnitsDeclarationSyntax base=MemberSyntax kind=TimeUnitsDeclaration
token keyword
token time
DividerClauseSyntax divider
token semi

PortConnectionSyntax final=false
list<AttributeInstanceSyntax> attributes

OrderedPortConnectionSyntax base=PortConnectionSyntax kind=OrderedPortConnection
ExpressionSyntax expr

NamedPortConnectionSyntax base=PortConnectionSyntax kind=NamedPortConnection
token dot
token name
ParenthesizedExpressionSyntax connection

WildcardPortConnectionSyntax base=PortConnectionSyntax kind=WildcardPortConnection
token dotStar

HierarchicalInstanceSyntax kind=HierarchicalInstance
token name
list<VariableDimensionSyntax> dimensions
token openParen
separated_list<PortConnectionSyntax> connections
token closeParen

HierarchyInstantiationSyntax base=MemberSyntax kind=HierarchyInstantiation
token type
ParameterValueAssignmentSyntax parameters
separated_list<HierarchicalInstanceSyntax> instances
token semi

FunctionPortSyntax kind=FunctionPort
list<AttributeInstanceSyntax> attributes
token constKeyword
token direction
token varKeyword
DataTypeSyntax dataType
VariableDeclaratorSyntax declarator

FunctionPortListSyntax kind=FunctionPortList
token openParen
separated_list<FunctionPortSyntax> ports
token closeParen

FunctionPrototypeSyntax kind=FunctionPrototype
token keyword
token lifetime
DataTypeSyntax returnType
NameSyntax name
FunctionPortListSyntax portList
token semi

FunctionDeclarationSyntax base=MemberSyntax
FunctionPrototypeSyntax prototype
list<SyntaxNode> items
token end
NamedBlockClauseSyntax endBlockName

kindmap<FunctionDeclarationSyntax>
FunctionDeclaration TaskDeclaration

AssertionItemPortSyntax kind=AssertionItemPort
list<AttributeInstanceSyntax> attributes
token local
token direction
DataTypeSyntax type
VariableDeclaratorSyntax declarator

AssertionItemPortListSyntax kind=AssertionItemPortList
token openParen
separated_list<AssertionItemPortSyntax> ports
token closeParen

LetDeclarationSyntax kind=LetDeclaration base=MemberSyntax
token let
token identifier
AssertionItemPortListSyntax portList
EqualsValueClauseSyntax initializer
token semi

PropertySequenceDeclarationSyntax kind=PropertySequenceDeclaration base=MemberSyntax
token start
token name
AssertionItemPortListSyntax portList
token semi
list<DataDeclarationSyntax> assertionVariables
PropertySpecSyntax propertySpec
ExpressionSyntax seqExpr
token optionalSemi
token end
NamedBlockClauseSyntax endBlockName

ExtendsClauseSyntax kind=ExtendsClause
token keyword
NameSyntax baseName
ArgumentListSyntax arguments

ImplementsClauseSyntax kind=ImplementsClause
token keyword
separated_list<NameSyntax> interfaces

ClassDeclarationSyntax base=MemberSyntax kind=ClassDeclaration
token virtualOrInterface
token classKeyword
token lifetime
token name
ParameterPortListSyntax parameters
ExtendsClauseSyntax extendsClause
ImplementsClauseSyntax implementsClause
token semi
list<MemberSyntax> items
token endClass
NamedBlockClauseSyntax endBlockName

ClassPropertyDeclarationSyntax base=MemberSyntax kind=ClassPropertyDeclaration
tokenlist qualifiers
MemberSyntax declaration

ClassMethodDeclarationSyntax base=MemberSyntax kind=ClassMethodDeclaration
tokenlist qualifiers
FunctionDeclarationSyntax declaration

ClassMethodPrototypeSyntax base=MemberSyntax kind=ClassMethodPrototype
tokenlist qualifiers
FunctionPrototypeSyntax prototype

ContinuousAssignSyntax base=MemberSyntax kind=ContinuousAssign
token assign
separated_list<ExpressionSyntax> assignments
token semi

DefParamAssignmentSyntax kind=DefParamAssignment
NameSyntax name
EqualsValueClauseSyntax setter

DefParamSyntax base=MemberSyntax kind=DefParam
token defparam
separated_list<DefParamAssignmentSyntax> assignments
token semi

ModportItemSyntax kind=ModportItem
token name
AnsiPortListSyntax ports

ModportDeclarationSyntax base=MemberSyntax kind=ModportDeclaration
token keyword
separated_list<ModportItemSyntax> items
token semi

ClockingSkewSyntax kind=ClockingSkew
token edge
token hash
ExpressionSyntax value

ClockingDirectionSyntax kind=ClockingDirection
token input
ClockingSkewSyntax inputSkew
token output
ClockingSkewSyntax ouputSkew
token inout

ClockingItemSyntax kind=ClockingItem
token defaultKeyword
ClockingDirectionSyntax direction
separated_list<AttributeSpecSyntax> assignments
token semi
MemberSyntax declaration

ClockingDeclarationSyntax base=MemberSyntax kind=ClockingDeclaration
token globalOrDefault
token clocking
token blockName
token at
ParenthesizedEventExpressionSyntax event
token eventIdentifier
token semi
list<ClockingItemSyntax> items
token endClocking
NamedBlockClauseSyntax endBlockName


// ----- CONSTRAINTS -----

ConstraintItemSyntax final=false
empty

DistWeightSyntax kind=DistWeight
token op
ExpressionSyntax expr

DistItemSyntax kind=DistItem
ExpressionSyntax range
DistWeightSyntax weight

DistConstraintListSyntax kind=DistConstraintList
token dist
token openBrace
separated_list<DistItemSyntax> items
token closeBrace

ExpressionOrDistSyntax base=ExpressionSyntax kind=ExpressionOrDist
ExpressionSyntax expr
DistConstraintListSyntax distribution

ExpressionConstraintSyntax base=ConstraintItemSyntax kind=ExpressionConstraint
token soft
ExpressionSyntax expr
token semi

UniquenessConstraintSyntax base=ConstraintItemSyntax kind=UniquenessConstraint
token unique
OpenRangeListSyntax ranges
token semi

ImplicationConstraintSyntax base=ConstraintItemSyntax kind=ImplicationConstraint
ExpressionSyntax left
token arrow
ConstraintItemSyntax constraints

ElseConstraintClauseSyntax kind=ElseConstraintClause
token elseKeyword
ConstraintItemSyntax constraints

ConditionalConstraintSyntax base=ConstraintItemSyntax kind=ConditionalConstraint
token ifKeyword
token openParen
ExpressionSyntax condition
token closeParen
ConstraintItemSyntax constraints
ElseConstraintClauseSyntax elseClause

LoopConstraintSyntax base=ConstraintItemSyntax kind=LoopConstraint
token foreachKeyword
ForeachLoopListSyntax loopList
ConstraintItemSyntax constraints

DisableConstraintSyntax base=ConstraintItemSyntax kind=DisableConstraint
token disable
token soft
NameSyntax name
token semi

ConstraintBlockSyntax base=ConstraintItemSyntax kind=ConstraintBlock
token openBrace
list<ConstraintItemSyntax> items
token closeBrace

ConstraintPrototypeSyntax base=MemberSyntax kind=ConstraintPrototype
tokenlist qualifiers
token keyword
token name
token semi

ConstraintDeclarationSyntax base=MemberSyntax kind=ConstraintDeclaration
tokenlist qualifiers
token keyword
token name
ConstraintBlockSyntax block

WithClauseSyntax base=ExpressionSyntax kind=WithClause
token with
token openParen
ExpressionSyntax expr
token closeParen

IdentifierListSyntax kind=IdentifierList
token openParen
separated_list<IdentifierNameSyntax> identifiers
token closeParen

RandomizeMethodWithClauseSyntax base=ExpressionSyntax kind=RandomizeMethodWithClause
token with
IdentifierListSyntax names
ConstraintBlockSyntax constraints

// ----- COVER GROUPS -----

WithFunctionSampleSyntax kind=WithFunctionSample
token with
token function
token sample
AnsiPortListSyntax portList

BlockEventExpressionSyntax final=false
empty

BinaryBlockEventExpressionSyntax base=BlockEventExpressionSyntax kind=BinaryBlockEventExpression
BlockEventExpressionSyntax left
token orKeyword
BlockEventExpressionSyntax right

PrimaryBlockEventExpressionSyntax base=BlockEventExpressionSyntax kind=PrimaryBlockEventExpression
token keyword
NameSyntax name

BlockCoverageEventSyntax kind=BlockCoverageEvent
token atat
token openParen
BlockEventExpressionSyntax expr
token closeParen

CovergroupDeclarationSyntax base=MemberSyntax kind=CovergroupDeclaration
token covergroup
token name
AnsiPortListSyntax portList
SyntaxNode event
token semi
list<MemberSyntax> members
token endgroup
NamedBlockClauseSyntax endBlockName

CoverageOptionSyntax base=MemberSyntax kind=CoverageOption
token option
token dot
token name
token equals
ExpressionSyntax expr
token semi

CoverpointSyntax base=MemberSyntax kind=Coverpoint
DataTypeSyntax type
NamedLabelSyntax label
token coverpoint
ExpressionSyntax expr
token openBrace
list<MemberSyntax> members
token closeBrace
token emptySemi

CoverageBinInitializerSyntax final=false
empty

DefaultCoverageBinInitializerSyntax base=CoverageBinInitializerSyntax kind=DefaultCoverageBinInitializer
token defaultKeyword
token sequenceKeyword

ExpressionCoverageBinInitializerSyntax base=CoverageBinInitializerSyntax kind=ExpressionCoverageBinInitializer
ExpressionSyntax expr
WithClauseSyntax withClause

RangeCoverageBinInitializerSyntax base=CoverageBinInitializerSyntax kind=RangeCoverageBinInitializer
OpenRangeListSyntax ranges
WithClauseSyntax withClause

IffClauseSyntax kind=IffClause
token iff
token openParen
ExpressionSyntax expr
token closeParen

CoverageBinsSyntax base=MemberSyntax kind=CoverageBins
token wildcard
token keyword
token name
ElementSelectSyntax selector
token equals
CoverageBinInitializerSyntax initializer
IffClauseSyntax iff
token semi

// ----- TOP LEVEL -----

CompilationUnitSyntax kind=CompilationUnit
list<MemberSyntax> members
token endOfFile

// ----- DIRECTIVES -----

DirectiveSyntax final=false
token directive

SimpleDirectiveSyntax base=DirectiveSyntax
token endOfDirective

kindmap<SimpleDirectiveSyntax>
CellDefineDirective PragmaDirective UnconnectedDriveDirective
NoUnconnectedDriveDirective EndCellDefineDirective EndKeywordsDirective
ResetAllDirective UndefineAllDirective

IncludeDirectiveSyntax base=DirectiveSyntax kind=IncludeDirective
token fileName
token endOfDirective

ConditionalBranchDirectiveSyntax base=DirectiveSyntax
token name
token endOfDirective
tokenlist disabledTokens

kindmap<ConditionalBranchDirectiveSyntax>
ElsIfDirective IfDefDirective IfNDefDirective

UnconditionalBranchDirectiveSyntax base=DirectiveSyntax
token endOfDirective
tokenlist disabledTokens

kindmap<UnconditionalBranchDirectiveSyntax>
EndIfDirective ElseDirective

MacroArgumentDefaultSyntax kind=MacroArgumentDefault
token equals
tokenlist tokens

MacroFormalArgumentSyntax kind=MacroFormalArgument
token name
MacroArgumentDefaultSyntax defaultValue

MacroFormalArgumentListSyntax kind=MacroFormalArgumentList
token openParen
separated_list<MacroFormalArgumentSyntax> args
token closeParen

DefineDirectiveSyntax base=DirectiveSyntax kind=DefineDirective
token name
MacroFormalArgumentListSyntax formalArguments
tokenlist body
token endOfDirective

MacroActualArgumentSyntax kind=MacroActualArgument
tokenlist tokens

MacroActualArgumentListSyntax kind=MacroActualArgumentList
token openParen
separated_list<MacroActualArgumentSyntax> args
token closeParen

MacroUsageSyntax base=DirectiveSyntax kind=MacroUsage
MacroActualArgumentListSyntax args

TimescaleDirectiveSyntax base=DirectiveSyntax kind=TimescaleDirective
token timeUnit
token timeUnitUnit
token slash
token timePrecision
token timePrecisionUnit
token endOfDirective

DefaultNetTypeDirectiveSyntax base=DirectiveSyntax kind=DefaultNetTypeDirective
token netType
token endOfDirective

LineDirectiveSyntax base=DirectiveSyntax kind=LineDirective
token lineNumber
token fileName
token level
token endOfDirective

UndefDirectiveSyntax base=DirectiveSyntax kind=UndefDirective
token name
token endOfDirective

BeginKeywordsDirectiveSyntax base=DirectiveSyntax kind=BeginKeywordsDirective
token versionSpecifier
token endOfDirective
