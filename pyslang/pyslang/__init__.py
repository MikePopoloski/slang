import json

# Import Pybind11 bindings
from _pyslang import *

__all__ = ['ASTContext', 'ASTFlags', 'AbortAssertionExpr', 'AcceptOnPropertyExprSyntax', 'ActionBlockSyntax', 'AnonymousProgramSymbol', 'AnonymousProgramSyntax', 'AnsiPortListSyntax', 'AnsiUdpPortListSyntax', 'ArbitrarySymbolExpression', 'ArgumentDirection', 'ArgumentListSyntax', 'ArgumentSyntax', 'ArrayOrRandomizeMethodExpressionSyntax', 'AssertionExpr', 'AssertionExprKind', 'AssertionInstanceExpression', 'AssertionItemPortListSyntax', 'AssertionItemPortSyntax', 'AssertionKind', 'AssertionPortSymbol', 'AssignmentPatternExpressionBase', 'AssignmentPatternExpressionSyntax', 'AssignmentPatternItemSyntax', 'AssignmentPatternSyntax', 'AssociativeArrayType', 'AttributeInstanceSyntax', 'AttributeSpecSyntax', 'AttributeSymbol', 'BadExpressionSyntax', 'Bag', 'BeginKeywordsDirectiveSyntax', 'BinSelectWithFilterExprSyntax', 'BinaryAssertionExpr', 'BinaryAssertionOperator', 'BinaryBinsSelectExprSyntax', 'BinaryBlockEventExpressionSyntax', 'BinaryConditionalDirectiveExpressionSyntax', 'BinaryEventExpressionSyntax', 'BinaryExpression', 'BinaryExpressionSyntax', 'BinaryOperator', 'BinaryPropertyExprSyntax', 'BinarySequenceExprSyntax', 'BindDirectiveSyntax', 'BindTargetListSyntax', 'BinsSelectConditionExprSyntax', 'BinsSelectExpr', 'BinsSelectExprKind', 'BinsSelectExpressionSyntax', 'BinsSelectionSyntax', 'BitSelectSyntax', 'BlockCoverageEventSyntax', 'BlockEventExpressionSyntax', 'BlockEventListControl', 'BlockStatement', 'BlockStatementSyntax', 'BreakStatement', 'BufferID', 'BumpAllocator', 'CallExpression', 'CaseAssertionExpr', 'CaseGenerateSyntax', 'CaseItemSyntax', 'CasePropertyExprSyntax', 'CaseStatementCondition', 'CaseStatementSyntax', 'CastExpressionSyntax', 'CellConfigRuleSyntax', 'ChargeStrengthSyntax', 'CheckerDataDeclarationSyntax', 'CheckerDeclarationSyntax', 'CheckerInstanceBodySymbol', 'CheckerInstanceStatementSyntax', 'CheckerInstanceSymbol', 'CheckerInstantiationSyntax', 'CheckerSymbol', 'ClassDeclarationSyntax', 'ClassMethodDeclarationSyntax', 'ClassMethodPrototypeSyntax', 'ClassNameSyntax', 'ClassPropertyDeclarationSyntax', 'ClassPropertySymbol', 'ClassSpecifierSyntax', 'ClassType', 'ClockVarSymbol', 'ClockingAssertionExpr', 'ClockingBlockSymbol', 'ClockingDeclarationSyntax', 'ClockingDirectionSyntax', 'ClockingEventExpression', 'ClockingItemSyntax', 'ClockingPropertyExprSyntax', 'ClockingSequenceExprSyntax', 'ClockingSkewSyntax', 'ColonExpressionClauseSyntax', 'CommandLineOptions', 'Compilation', 'CompilationFlags', 'CompilationOptions', 'CompilationUnitSymbol', 'CompilationUnitSyntax', 'ConcatenationExpressionSyntax', 'ConcurrentAssertionMemberSyntax', 'ConcurrentAssertionStatement', 'ConcurrentAssertionStatementSyntax', 'ConditionBinsSelectExpr', 'ConditionalAssertionExpr', 'ConditionalBranchDirectiveSyntax', 'ConditionalConstraintSyntax', 'ConditionalDirectiveExpressionSyntax', 'ConditionalExpressionSyntax', 'ConditionalPathDeclarationSyntax', 'ConditionalPatternSyntax', 'ConditionalPredicateSyntax', 'ConditionalPropertyExprSyntax', 'ConditionalStatementSyntax', 'ConfigBlockSymbol', 'ConfigCellIdentifierSyntax', 'ConfigDeclarationSyntax', 'ConfigInstanceIdentifierSyntax', 'ConfigLiblistSyntax', 'ConfigRuleClauseSyntax', 'ConfigRuleSyntax', 'ConfigUseClauseSyntax', 'ConstantPattern', 'ConstantRange', 'ConstantValue', 'Constraint', 'ConstraintBlockFlags', 'ConstraintBlockSymbol', 'ConstraintBlockSyntax', 'ConstraintDeclarationSyntax', 'ConstraintItemSyntax', 'ConstraintKind', 'ConstraintList', 'ConstraintPrototypeSyntax', 'ContinueStatement', 'ContinuousAssignSymbol', 'ContinuousAssignSyntax', 'ConversionExpression', 'ConversionKind', 'CopyClassExpressionSyntax', 'CoverCrossBodySymbol', 'CoverCrossSymbol', 'CoverCrossSyntax', 'CoverageBinInitializerSyntax', 'CoverageBinSymbol', 'CoverageBinsArraySizeSyntax', 'CoverageBinsSyntax', 'CoverageIffClauseSyntax', 'CoverageOptionSetter', 'CoverageOptionSyntax', 'CovergroupBodySymbol', 'CovergroupDeclarationSyntax', 'CovergroupType', 'CoverpointSymbol', 'CoverpointSyntax', 'CrossIdBinsSelectExpr', 'CycleDelayControl', 'DPIExportSyntax', 'DPIImportSyntax', 'DPIOpenArrayType', 'DataDeclarationSyntax', 'DataTypeExpression', 'DataTypeSyntax', 'DeclaratorSyntax', 'DeclaredType', 'DefParamAssignmentSyntax', 'DefParamSymbol', 'DefParamSyntax', 'DefaultCaseItemSyntax', 'DefaultClockingReferenceSyntax', 'DefaultConfigRuleSyntax', 'DefaultCoverageBinInitializerSyntax', 'DefaultDecayTimeDirectiveSyntax', 'DefaultDisableDeclarationSyntax', 'DefaultDistItemSyntax', 'DefaultExtendsClauseArgSyntax', 'DefaultFunctionPortSyntax', 'DefaultNetTypeDirectiveSyntax', 'DefaultPropertyCaseItemSyntax', 'DefaultRsCaseItemSyntax', 'DefaultSkewItemSyntax', 'DefaultTriregStrengthDirectiveSyntax', 'DeferredAssertionSyntax', 'DefineDirectiveSyntax', 'DefinitionKind', 'DefinitionSymbol', 'Delay3Control', 'Delay3Syntax', 'DelaySyntax', 'DelayedSequenceElementSyntax', 'DelayedSequenceExprSyntax', 'DiagCode', 'DiagGroup', 'DiagSubsystem', 'Diagnostic', 'DiagnosticClient', 'DiagnosticEngine', 'DiagnosticSeverity', 'Diagnostics', 'Diags', 'DimensionKind', 'DimensionSpecifierSyntax', 'DirectiveSyntax', 'DisableConstraintSyntax', 'DisableForkStatementSyntax', 'DisableIffAssertionExpr', 'DisableIffSyntax', 'DisableSoftConstraint', 'DisableStatementSyntax', 'DistConstraintListSyntax', 'DistExpression', 'DistItemBaseSyntax', 'DistItemSyntax', 'DistWeightSyntax', 'DividerClauseSyntax', 'DoWhileLoopStatement', 'DoWhileStatementSyntax', 'DotMemberClauseSyntax', 'DriveStrengthSyntax', 'Driver', 'DriverKind', 'DynamicArrayType', 'EdgeControlSpecifierSyntax', 'EdgeDescriptorSyntax', 'EdgeKind', 'EdgeSensitivePathSuffixSyntax', 'ElabSystemTaskKind', 'ElabSystemTaskSymbol', 'ElabSystemTaskSyntax', 'ElementSelectExpressionSyntax', 'ElementSelectSyntax', 'ElseClauseSyntax', 'ElseConstraintClauseSyntax', 'ElsePropertyClauseSyntax', 'EmptyArgumentExpression', 'EmptyArgumentSyntax', 'EmptyIdentifierNameSyntax', 'EmptyMemberSymbol', 'EmptyMemberSyntax', 'EmptyNonAnsiPortSyntax', 'EmptyPortConnectionSyntax', 'EmptyQueueExpressionSyntax', 'EmptyStatementSyntax', 'EmptyTimingCheckArgSyntax', 'EnumTypeSyntax', 'EnumValueSymbol', 'EqualsAssertionArgClauseSyntax', 'EqualsTypeClauseSyntax', 'EqualsValueClauseSyntax', 'ErrorType', 'EvalContext', 'EvalFlags', 'EvalResult', 'EvaluatedDimension', 'EventControlSyntax', 'EventControlWithExpressionSyntax', 'EventExpressionSyntax', 'EventListControl', 'EventTriggerStatement', 'EventTriggerStatementSyntax', 'ExplicitAnsiPortSyntax', 'ExplicitImportSymbol', 'ExplicitNonAnsiPortSyntax', 'Expression', 'ExpressionConstraintSyntax', 'ExpressionCoverageBinInitializerSyntax', 'ExpressionKind', 'ExpressionOrDistSyntax', 'ExpressionPatternSyntax', 'ExpressionStatementSyntax', 'ExpressionSyntax', 'ExpressionTimingCheckArgSyntax', 'ExtendsClauseSyntax', 'ExternInterfaceMethodSyntax', 'ExternModuleDeclSyntax', 'ExternUdpDeclSyntax', 'FieldSymbol', 'FilePathSpecSyntax', 'FirstMatchAssertionExpr', 'FirstMatchSequenceExprSyntax', 'FixedSizeUnpackedArrayType', 'FloatingType', 'ForLoopStatementSyntax', 'ForVariableDeclarationSyntax', 'ForeachConstraint', 'ForeachLoopListSyntax', 'ForeachLoopStatementSyntax', 'ForeverLoopStatement', 'ForeverStatementSyntax', 'FormalArgumentSymbol', 'ForwardTypeRestrictionSyntax', 'ForwardTypedefDeclarationSyntax', 'ForwardingTypedefSymbol', 'FunctionDeclarationSyntax', 'FunctionPortBaseSyntax', 'FunctionPortListSyntax', 'FunctionPortSyntax', 'FunctionPrototypeSyntax', 'GenerateBlockArraySymbol', 'GenerateBlockSymbol', 'GenerateBlockSyntax', 'GenerateRegionSyntax', 'GenericClassDefSymbol', 'GenvarDeclarationSyntax', 'GenvarSymbol', 'HierarchicalInstanceSyntax', 'HierarchicalValueExpression', 'HierarchyInstantiationSyntax', 'IdWithExprCoverageBinInitializerSyntax', 'IdentifierNameSyntax', 'IdentifierSelectNameSyntax', 'IfGenerateSyntax', 'IfNonePathDeclarationSyntax', 'IffEventClauseSyntax', 'ImmediateAssertionMemberSyntax', 'ImmediateAssertionStatement', 'ImmediateAssertionStatementSyntax', 'ImplementsClauseSyntax', 'ImplicationConstraintSyntax', 'ImplicitAnsiPortSyntax', 'ImplicitEventControlSyntax', 'ImplicitNonAnsiPortSyntax', 'ImplicitTypeSyntax', 'IncludeDirectiveSyntax', 'IncludeMetadata', 'InsideExpressionSyntax', 'InstanceArraySymbol', 'InstanceBodySymbol', 'InstanceConfigRuleSyntax', 'InstanceNameSyntax', 'InstanceSymbol', 'InstanceSymbolBase', 'IntegerTypeSyntax', 'IntegerVectorExpressionSyntax', 'IntegralFlags', 'IntegralType', 'InterfacePortHeaderSyntax', 'InterfacePortSymbol', 'IntersectClauseSyntax', 'InvalidAssertionExpr', 'InvalidBinsSelectExpr', 'InvalidConstraint', 'InvalidExpression', 'InvalidPattern', 'InvalidStatement', 'InvalidTimingControl', 'InvocationExpressionSyntax', 'IteratorSymbol', 'JumpStatementSyntax', 'KeywordNameSyntax', 'KeywordTypeSyntax', 'KnownSystemName', 'LValue', 'LValueReferenceExpression', 'LanguageVersion', 'LetDeclSymbol', 'LetDeclarationSyntax', 'LexerOptions', 'LibraryDeclarationSyntax', 'LibraryIncDirClauseSyntax', 'LibraryIncludeStatementSyntax', 'LibraryMapSyntax', 'LineDirectiveSyntax', 'LiteralBase', 'LiteralExpressionSyntax', 'LocalAssertionVarSymbol', 'LocalVariableDeclarationSyntax', 'Lookup', 'LookupFlags', 'LookupLocation', 'LookupResult', 'LookupResultFlags', 'LoopConstraintSyntax', 'LoopGenerateSyntax', 'LoopStatementSyntax', 'MacroActualArgumentListSyntax', 'MacroActualArgumentSyntax', 'MacroArgumentDefaultSyntax', 'MacroFormalArgumentListSyntax', 'MacroFormalArgumentSyntax', 'MacroUsageSyntax', 'MatchesClauseSyntax', 'MemberAccessExpressionSyntax', 'MemberSyntax', 'MethodFlags', 'MethodPrototypeSymbol', 'MinTypMax', 'MinTypMaxExpressionSyntax', 'ModportClockingPortSyntax', 'ModportClockingSymbol', 'ModportDeclarationSyntax', 'ModportExplicitPortSyntax', 'ModportItemSyntax', 'ModportNamedPortSyntax', 'ModportPortSymbol', 'ModportPortSyntax', 'ModportSimplePortListSyntax', 'ModportSubroutinePortListSyntax', 'ModportSubroutinePortSyntax', 'ModportSymbol', 'ModuleDeclarationSyntax', 'ModuleHeaderSyntax', 'MultiPortSymbol', 'MultipleConcatenationExpressionSyntax', 'NameSyntax', 'NameValuePragmaExpressionSyntax', 'NamedArgumentSyntax', 'NamedBlockClauseSyntax', 'NamedConditionalDirectiveExpressionSyntax', 'NamedLabelSyntax', 'NamedParamAssignmentSyntax', 'NamedPortConnectionSyntax', 'NamedStructurePatternMemberSyntax', 'NamedTypeSyntax', 'NamedValueExpression', 'NetAliasSymbol', 'NetAliasSyntax', 'NetDeclarationSyntax', 'NetPortHeaderSyntax', 'NetStrengthSyntax', 'NetSymbol', 'NetType', 'NetTypeDeclarationSyntax', 'NewArrayExpressionSyntax', 'NewClassExpressionSyntax', 'NewCovergroupExpression', 'NonAnsiPortListSyntax', 'NonAnsiPortSyntax', 'NonAnsiUdpPortListSyntax', 'NonConstantFunction', 'Null', 'NullLiteral', 'NullType', 'NumberPragmaExpressionSyntax', 'OneStepDelayControl', 'OneStepDelaySyntax', 'OrderedArgumentSyntax', 'OrderedParamAssignmentSyntax', 'OrderedPortConnectionSyntax', 'OrderedStructurePatternMemberSyntax', 'PackageExportAllDeclarationSyntax', 'PackageExportDeclarationSyntax', 'PackageImportDeclarationSyntax', 'PackageImportItemSyntax', 'PackageSymbol', 'PackedArrayType', 'PackedStructType', 'PackedUnionType', 'ParamAssignmentSyntax', 'ParameterDeclarationBaseSyntax', 'ParameterDeclarationStatementSyntax', 'ParameterDeclarationSyntax', 'ParameterPortListSyntax', 'ParameterSymbol', 'ParameterSymbolBase', 'ParameterValueAssignmentSyntax', 'ParenExpressionListSyntax', 'ParenPragmaExpressionSyntax', 'ParenthesizedBinsSelectExprSyntax', 'ParenthesizedConditionalDirectiveExpressionSyntax', 'ParenthesizedEventExpressionSyntax', 'ParenthesizedExpressionSyntax', 'ParenthesizedPatternSyntax', 'ParenthesizedPropertyExprSyntax', 'ParenthesizedSequenceExprSyntax', 'ParserOptions', 'PathDeclarationSyntax', 'PathDescriptionSyntax', 'PathSuffixSyntax', 'Pattern', 'PatternCaseItemSyntax', 'PatternCaseStatement', 'PatternKind', 'PatternSyntax', 'PatternVarSymbol', 'PortConcatenationSyntax', 'PortConnection', 'PortConnectionSyntax', 'PortDeclarationSyntax', 'PortExpressionSyntax', 'PortHeaderSyntax', 'PortListSyntax', 'PortReferenceSyntax', 'PortSymbol', 'PostfixUnaryExpressionSyntax', 'PragmaDirectiveSyntax', 'PragmaExpressionSyntax', 'PredefinedIntegerType', 'PrefixUnaryExpressionSyntax', 'PreprocessorOptions', 'PrimaryBlockEventExpressionSyntax', 'PrimaryExpressionSyntax', 'PrimitiveInstanceSymbol', 'PrimitiveInstantiationSyntax', 'PrimitivePortDirection', 'PrimitivePortSymbol', 'PrimitiveSymbol', 'ProceduralAssignStatementSyntax', 'ProceduralBlockKind', 'ProceduralBlockSymbol', 'ProceduralBlockSyntax', 'ProceduralCheckerStatement', 'ProceduralDeassignStatementSyntax', 'ProductionSyntax', 'PropertyCaseItemSyntax', 'PropertyDeclarationSyntax', 'PropertyExprSyntax', 'PropertySpecSyntax', 'PropertySymbol', 'PullStrengthSyntax', 'PulseStyleDeclarationSyntax', 'PulseStyleKind', 'PulseStyleSymbol', 'QueueDimensionSpecifierSyntax', 'QueueType', 'RandCaseItemSyntax', 'RandCaseStatementSyntax', 'RandJoinClauseSyntax', 'RandMode', 'RandSeqProductionSymbol', 'RandSequenceStatementSyntax', 'RangeCoverageBinInitializerSyntax', 'RangeDimensionSpecifierSyntax', 'RangeListSyntax', 'RangeSelectExpression', 'RangeSelectSyntax', 'RangeSelectionKind', 'RepeatLoopStatement', 'RepeatedEventControlSyntax', 'ReplicatedAssignmentPatternExpression', 'ReplicatedAssignmentPatternSyntax', 'ReplicationExpression', 'ReportedDiagnostic', 'ReturnStatementSyntax', 'RootSymbol', 'RsCaseItemSyntax', 'RsCaseSyntax', 'RsCodeBlockSyntax', 'RsElseClauseSyntax', 'RsIfElseSyntax', 'RsProdItemSyntax', 'RsProdSyntax', 'RsRepeatSyntax', 'RsRuleSyntax', 'RsWeightClauseSyntax', 'SVInt', 'ScalarType', 'Scope', 'ScopedNameSyntax', 'ScriptSession', 'SelectorSyntax', 'SequenceConcatExpr', 'SequenceDeclarationSyntax', 'SequenceExprSyntax', 'SequenceMatchListSyntax', 'SequenceRange', 'SequenceRepetitionSyntax', 'SequenceSymbol', 'SequenceWithMatchExpr', 'SetExprBinsSelectExpr', 'SignalEventControl', 'SignalEventExpressionSyntax', 'SignedCastExpressionSyntax', 'SimpleAssertionExpr', 'SimpleAssignmentPatternExpression', 'SimpleAssignmentPatternSyntax', 'SimpleBinsSelectExprSyntax', 'SimpleDirectiveSyntax', 'SimplePathSuffixSyntax', 'SimplePragmaExpressionSyntax', 'SimplePropertyExprSyntax', 'SimpleSequenceExprSyntax', 'SimpleSystemSubroutine', 'SolveBeforeConstraintSyntax', 'SourceBuffer', 'SourceLibrary', 'SourceLoader', 'SourceLocation', 'SourceManager', 'SourceOptions', 'SourceRange', 'SpecifyBlockSymbol', 'SpecifyBlockSyntax', 'SpecparamDeclarationSyntax', 'SpecparamDeclaratorSyntax', 'SpecparamSymbol', 'StandardCaseItemSyntax', 'StandardPropertyCaseItemSyntax', 'StandardRsCaseItemSyntax', 'Statement', 'StatementBlockKind', 'StatementBlockSymbol', 'StatementKind', 'StatementList', 'StatementSyntax', 'StreamExpressionSyntax', 'StreamExpressionWithRangeSyntax', 'StreamingConcatenationExpressionSyntax', 'StrongWeakAssertionExpr', 'StrongWeakPropertyExprSyntax', 'StructUnionMemberSyntax', 'StructUnionTypeSyntax', 'StructurePatternMemberSyntax', 'StructurePatternSyntax', 'StructuredAssignmentPatternExpression', 'StructuredAssignmentPatternSyntax', 'SubroutineKind', 'SubroutineSymbol', 'SuperNewDefaultedArgsExpressionSyntax', 'Symbol', 'SymbolKind', 'SyntaxKind', 'SyntaxNode', 'SyntaxPrinter', 'SyntaxRewriter', 'SyntaxTree', 'SystemNameSyntax', 'SystemSubroutine', 'SystemTimingCheckKind', 'SystemTimingCheckSymbol', 'SystemTimingCheckSyntax', 'TaggedPatternSyntax', 'TaggedUnionExpressionSyntax', 'TempVarSymbol', 'TextDiagnosticClient', 'TimeScale', 'TimeScaleDirectiveSyntax', 'TimeScaleMagnitude', 'TimeScaleValue', 'TimeUnit', 'TimeUnitsDeclarationSyntax', 'TimedStatement', 'TimingCheckArgSyntax', 'TimingCheckEventArgSyntax', 'TimingCheckEventConditionSyntax', 'TimingControl', 'TimingControlExpressionSyntax', 'TimingControlKind', 'TimingControlStatementSyntax', 'TimingControlSyntax', 'TimingPathSymbol', 'Token', 'TokenKind', 'TransListCoverageBinInitializerSyntax', 'TransRangeSyntax', 'TransRepeatRangeSyntax', 'TransSetSyntax', 'TransparentMemberSymbol', 'Trivia', 'TriviaKind', 'Type', 'TypeAliasType', 'TypeAssignmentSyntax', 'TypeParameterDeclarationSyntax', 'TypeParameterSymbol', 'TypePrinter', 'TypePrintingOptions', 'TypeRefType', 'TypeReferenceExpression', 'TypeReferenceSyntax', 'TypedefDeclarationSyntax', 'UdpBodySyntax', 'UdpDeclarationSyntax', 'UdpEdgeFieldSyntax', 'UdpEntrySyntax', 'UdpFieldBaseSyntax', 'UdpInitialStmtSyntax', 'UdpInputPortDeclSyntax', 'UdpOutputPortDeclSyntax', 'UdpPortDeclSyntax', 'UdpPortListSyntax', 'UdpSimpleFieldSyntax', 'UnaryAssertionExpr', 'UnaryAssertionOperator', 'UnaryBinsSelectExprSyntax', 'UnaryConditionalDirectiveExpressionSyntax', 'UnaryExpression', 'UnaryOperator', 'UnaryPropertyExprSyntax', 'UnarySelectPropertyExprSyntax', 'UnbasedUnsizedIntegerLiteral', 'Unbounded', 'UnboundedLiteral', 'UnboundedType', 'UnconditionalBranchDirectiveSyntax', 'UnconnectedDrive', 'UnconnectedDriveDirectiveSyntax', 'UndefDirectiveSyntax', 'UninstantiatedDefSymbol', 'UniquePriorityCheck', 'UniquenessConstraintSyntax', 'UnpackedStructType', 'UnpackedUnionType', 'UntypedType', 'UserDefinedNetDeclarationSyntax', 'ValueDriver', 'ValueExpressionBase', 'ValueRangeExpressionSyntax', 'ValueRangeKind', 'ValueSymbol', 'VariableDeclStatement', 'VariableDimensionSyntax', 'VariableFlags', 'VariableLifetime', 'VariablePatternSyntax', 'VariablePortHeaderSyntax', 'VariableSymbol', 'VersionInfo', 'VirtualInterfaceTypeSyntax', 'Visibility', 'VisitAction', 'VoidCastedCallStatementSyntax', 'WaitForkStatementSyntax', 'WaitOrderStatementSyntax', 'WaitStatementSyntax', 'WhileLoopStatement', 'WildcardDimensionSpecifierSyntax', 'WildcardImportSymbol', 'WildcardPatternSyntax', 'WildcardPortConnectionSyntax', 'WildcardPortListSyntax', 'WildcardUdpPortListSyntax', 'WithClauseSyntax', 'WithFunctionClauseSyntax', 'WithFunctionSampleSyntax', 'clog2', 'cls', 'json', 'literalBaseFromChar', 'logic_t', 'node_to_dict', 'rewrite']

# Generic conversion from node to dict
def node_to_dict(node):
    if isinstance(node, (int, float, bool, str)):
        return node

    if node is None:
        return None

    cls_name = type(node).__name__

    if isinstance(node, (SyntaxKind, TokenKind, TriviaKind)):
        return str(node).split(".")[-1]

    if isinstance(node, SourceLocation):
        return {
            "type": cls_name,
            # "buffer": node.buffer, # TODO: Figure out how to serialize buffer
            "offset": node.offset,
        }

    if isinstance(node, list):
        return [node_to_dict(item) for item in node]

    if isinstance(node, dict):
        return {k: node_to_dict(v) for k, v in node.items()}

    text = str(node) if hasattr(node, "__str__") else None

    def custom_sort_key(item):
        # Put start before end, and sort others by name
        priority = {"kind": -100, "start": 0, "end": 1}
        return (priority.get(item, 20000), item)  # Secondary sort by name

    # Collect non-callable, non-private, non-cyclic attributes.
    exclude_fields = {"children", "parent", "child", "parents"}
    properties = {
        k: node_to_dict(getattr(node, k))
        for k in sorted(dir(node), key=custom_sort_key)
        if not k.startswith("_")
        and not callable(getattr(node, k))
        and k not in exclude_fields
    }

    result = {"type": cls_name, **properties}

    if text and not text.startswith("<") and not text.endswith(">"):
        result["text"] = text

    # Handle iterable children for SyntaxNode-like objects
    if hasattr(node, "__iter__"):
        result["children"] = [node_to_dict(child) for child in node]

    return result


# Extend relevant classes with `to_dict` and `to_json`
def _extend_with_serialization(cls):
    def to_dict(self):
        return node_to_dict(self)

    def to_json(self, **kwargs):
        return json.dumps(self.to_dict(), indent=2, **kwargs)

    cls.to_dict = to_dict
    cls.to_json = to_json


# Automatically register serialization for known node types
for cls in [SyntaxNode, Token, Trivia]:
    _extend_with_serialization(cls)
