# Import Pybind11 bindings
import json

from _pyslang import *

__all__ = [
    "ASTContext",
    "ASTFlags",
    "AbortAssertionExpr",
    "AcceptOnPropertyExprSyntax",
    "ActionBlockSyntax",
    "AnonymousProgramSymbol",
    "AnonymousProgramSyntax",
    "AnsiPortListSyntax",
    "AnsiUdpPortListSyntax",
    "ArbitrarySymbolExpression",
    "ArgumentDirection",
    "ArgumentListSyntax",
    "ArgumentSyntax",
    "ArrayOrRandomizeMethodExpressionSyntax",
    "AssertionExpr",
    "AssertionExprKind",
    "AssertionInstanceExpression",
    "AssertionItemPortListSyntax",
    "AssertionItemPortSyntax",
    "AssertionKind",
    "AssertionPortSymbol",
    "AssignmentExpression",
    "AssignmentPatternExpressionBase",
    "AssignmentPatternExpressionSyntax",
    "AssignmentPatternItemSyntax",
    "AssignmentPatternSyntax",
    "AssociativeArrayType",
    "AttributeInstanceSyntax",
    "AttributeSpecSyntax",
    "AttributeSymbol",
    "BadExpressionSyntax",
    "Bag",
    "BeginKeywordsDirectiveSyntax",
    "BinSelectWithFilterExpr",
    "BinSelectWithFilterExprSyntax",
    "BinaryAssertionExpr",
    "BinaryAssertionOperator",
    "BinaryBinsSelectExpr",
    "BinaryBinsSelectExprSyntax",
    "BinaryBlockEventExpressionSyntax",
    "BinaryConditionalDirectiveExpressionSyntax",
    "BinaryEventExpressionSyntax",
    "BinaryExpression",
    "BinaryExpressionSyntax",
    "BinaryOperator",
    "BinaryPropertyExprSyntax",
    "BinarySequenceExprSyntax",
    "BindDirectiveSyntax",
    "BindTargetListSyntax",
    "BinsSelectConditionExprSyntax",
    "BinsSelectExpr",
    "BinsSelectExprKind",
    "BinsSelectExpressionSyntax",
    "BinsSelectionSyntax",
    "BitSelectSyntax",
    "BlockCoverageEventSyntax",
    "BlockEventExpressionSyntax",
    "BlockEventListControl",
    "BlockStatement",
    "BlockStatementSyntax",
    "BreakStatement",
    "BufferID",
    "BumpAllocator",
    "CHandleType",
    "CallExpression",
    "CaseAssertionExpr",
    "CaseGenerateSyntax",
    "CaseItemSyntax",
    "CasePropertyExprSyntax",
    "CaseStatement",
    "CaseStatementCondition",
    "CaseStatementSyntax",
    "CastExpressionSyntax",
    "CellConfigRuleSyntax",
    "ChargeStrengthSyntax",
    "CheckerDataDeclarationSyntax",
    "CheckerDeclarationSyntax",
    "CheckerInstanceBodySymbol",
    "CheckerInstanceStatementSyntax",
    "CheckerInstanceSymbol",
    "CheckerInstantiationSyntax",
    "CheckerSymbol",
    "ClassDeclarationSyntax",
    "ClassMethodDeclarationSyntax",
    "ClassMethodPrototypeSyntax",
    "ClassNameSyntax",
    "ClassPropertyDeclarationSyntax",
    "ClassPropertySymbol",
    "ClassSpecifierSyntax",
    "ClassType",
    "ClockVarSymbol",
    "ClockingAssertionExpr",
    "ClockingBlockSymbol",
    "ClockingDeclarationSyntax",
    "ClockingDirectionSyntax",
    "ClockingEventExpression",
    "ClockingItemSyntax",
    "ClockingPropertyExprSyntax",
    "ClockingSequenceExprSyntax",
    "ClockingSkew",
    "ClockingSkewSyntax",
    "ColonExpressionClauseSyntax",
    "CommandLineOptions",
    "Compilation",
    "CompilationFlags",
    "CompilationOptions",
    "CompilationUnitSymbol",
    "CompilationUnitSyntax",
    "ConcatenationExpression",
    "ConcatenationExpressionSyntax",
    "ConcurrentAssertionMemberSyntax",
    "ConcurrentAssertionStatement",
    "ConcurrentAssertionStatementSyntax",
    "ConditionBinsSelectExpr",
    "ConditionalAssertionExpr",
    "ConditionalBranchDirectiveSyntax",
    "ConditionalConstraint",
    "ConditionalConstraintSyntax",
    "ConditionalDirectiveExpressionSyntax",
    "ConditionalExpression",
    "ConditionalExpressionSyntax",
    "ConditionalPathDeclarationSyntax",
    "ConditionalPatternSyntax",
    "ConditionalPredicateSyntax",
    "ConditionalPropertyExprSyntax",
    "ConditionalStatement",
    "ConditionalStatementSyntax",
    "ConfigBlockSymbol",
    "ConfigCellIdentifierSyntax",
    "ConfigDeclarationSyntax",
    "ConfigInstanceIdentifierSyntax",
    "ConfigLiblistSyntax",
    "ConfigRuleClauseSyntax",
    "ConfigRuleSyntax",
    "ConfigUseClauseSyntax",
    "ConstantPattern",
    "ConstantRange",
    "ConstantValue",
    "Constraint",
    "ConstraintBlockFlags",
    "ConstraintBlockSymbol",
    "ConstraintBlockSyntax",
    "ConstraintDeclarationSyntax",
    "ConstraintItemSyntax",
    "ConstraintKind",
    "ConstraintList",
    "ConstraintPrototypeSyntax",
    "ContinueStatement",
    "ContinuousAssignSymbol",
    "ContinuousAssignSyntax",
    "ConversionExpression",
    "ConversionKind",
    "CopyClassExpression",
    "CopyClassExpressionSyntax",
    "CoverCrossBodySymbol",
    "CoverCrossSymbol",
    "CoverCrossSyntax",
    "CoverageBinInitializerSyntax",
    "CoverageBinSymbol",
    "CoverageBinsArraySizeSyntax",
    "CoverageBinsSyntax",
    "CoverageIffClauseSyntax",
    "CoverageOptionSetter",
    "CoverageOptionSyntax",
    "CovergroupBodySymbol",
    "CovergroupDeclarationSyntax",
    "CovergroupType",
    "CoverpointSymbol",
    "CoverpointSyntax",
    "CrossIdBinsSelectExpr",
    "CycleDelayControl",
    "DPIExportSyntax",
    "DPIImportSyntax",
    "DPIOpenArrayType",
    "DataDeclarationSyntax",
    "DataTypeExpression",
    "DataTypeSyntax",
    "DeclaratorSyntax",
    "DeclaredType",
    "DefParamAssignmentSyntax",
    "DefParamSymbol",
    "DefParamSyntax",
    "DefaultCaseItemSyntax",
    "DefaultClockingReferenceSyntax",
    "DefaultConfigRuleSyntax",
    "DefaultCoverageBinInitializerSyntax",
    "DefaultDecayTimeDirectiveSyntax",
    "DefaultDisableDeclarationSyntax",
    "DefaultDistItemSyntax",
    "DefaultExtendsClauseArgSyntax",
    "DefaultFunctionPortSyntax",
    "DefaultNetTypeDirectiveSyntax",
    "DefaultPropertyCaseItemSyntax",
    "DefaultRsCaseItemSyntax",
    "DefaultSkewItemSyntax",
    "DefaultTriregStrengthDirectiveSyntax",
    "DeferredAssertionSyntax",
    "DefineDirectiveSyntax",
    "DefinitionKind",
    "DefinitionSymbol",
    "Delay3Control",
    "Delay3Syntax",
    "DelayControl",
    "DelaySyntax",
    "DelayedSequenceElementSyntax",
    "DelayedSequenceExprSyntax",
    "DiagCode",
    "DiagGroup",
    "DiagSubsystem",
    "Diagnostic",
    "DiagnosticClient",
    "DiagnosticEngine",
    "DiagnosticSeverity",
    "Diagnostics",
    "Diags",
    "DimensionKind",
    "DimensionSpecifierSyntax",
    "DirectiveSyntax",
    "DisableConstraintSyntax",
    "DisableForkStatement",
    "DisableForkStatementSyntax",
    "DisableIffAssertionExpr",
    "DisableIffSyntax",
    "DisableSoftConstraint",
    "DisableStatement",
    "DisableStatementSyntax",
    "DistConstraintListSyntax",
    "DistExpression",
    "DistItemBaseSyntax",
    "DistItemSyntax",
    "DistWeightSyntax",
    "DividerClauseSyntax",
    "DoWhileLoopStatement",
    "DoWhileStatementSyntax",
    "DotMemberClauseSyntax",
    "DriveStrengthSyntax",
    "Driver",
    "DriverKind",
    "DynamicArrayType",
    "EdgeControlSpecifierSyntax",
    "EdgeDescriptorSyntax",
    "EdgeKind",
    "EdgeSensitivePathSuffixSyntax",
    "ElabSystemTaskKind",
    "ElabSystemTaskSymbol",
    "ElabSystemTaskSyntax",
    "ElementSelectExpression",
    "ElementSelectExpressionSyntax",
    "ElementSelectSyntax",
    "ElseClauseSyntax",
    "ElseConstraintClauseSyntax",
    "ElsePropertyClauseSyntax",
    "EmptyArgumentExpression",
    "EmptyArgumentSyntax",
    "EmptyIdentifierNameSyntax",
    "EmptyMemberSymbol",
    "EmptyMemberSyntax",
    "EmptyNonAnsiPortSyntax",
    "EmptyPortConnectionSyntax",
    "EmptyQueueExpressionSyntax",
    "EmptyStatement",
    "EmptyStatementSyntax",
    "EmptyTimingCheckArgSyntax",
    "EnumType",
    "EnumTypeSyntax",
    "EnumValueSymbol",
    "EqualsAssertionArgClauseSyntax",
    "EqualsTypeClauseSyntax",
    "EqualsValueClauseSyntax",
    "ErrorType",
    "EvalContext",
    "EvalFlags",
    "EvalResult",
    "EvaluatedDimension",
    "EventControlSyntax",
    "EventControlWithExpressionSyntax",
    "EventExpressionSyntax",
    "EventListControl",
    "EventTriggerStatement",
    "EventTriggerStatementSyntax",
    "EventType",
    "ExplicitAnsiPortSyntax",
    "ExplicitImportSymbol",
    "ExplicitNonAnsiPortSyntax",
    "Expression",
    "ExpressionConstraint",
    "ExpressionConstraintSyntax",
    "ExpressionCoverageBinInitializerSyntax",
    "ExpressionKind",
    "ExpressionOrDistSyntax",
    "ExpressionPatternSyntax",
    "ExpressionStatement",
    "ExpressionStatementSyntax",
    "ExpressionSyntax",
    "ExpressionTimingCheckArgSyntax",
    "ExtendsClauseSyntax",
    "ExternInterfaceMethodSyntax",
    "ExternModuleDeclSyntax",
    "ExternUdpDeclSyntax",
    "FieldSymbol",
    "FilePathSpecSyntax",
    "FirstMatchAssertionExpr",
    "FirstMatchSequenceExprSyntax",
    "FixedSizeUnpackedArrayType",
    "FloatingType",
    "ForLoopStatement",
    "ForLoopStatementSyntax",
    "ForVariableDeclarationSyntax",
    "ForeachConstraint",
    "ForeachLoopListSyntax",
    "ForeachLoopStatement",
    "ForeachLoopStatementSyntax",
    "ForeverLoopStatement",
    "ForeverStatementSyntax",
    "FormalArgumentSymbol",
    "ForwardTypeRestriction",
    "ForwardTypeRestrictionSyntax",
    "ForwardTypedefDeclarationSyntax",
    "ForwardingTypedefSymbol",
    "FunctionDeclarationSyntax",
    "FunctionPortBaseSyntax",
    "FunctionPortListSyntax",
    "FunctionPortSyntax",
    "FunctionPrototypeSyntax",
    "GenerateBlockArraySymbol",
    "GenerateBlockSymbol",
    "GenerateBlockSyntax",
    "GenerateRegionSyntax",
    "GenericClassDefSymbol",
    "GenvarDeclarationSyntax",
    "GenvarSymbol",
    "HierarchicalInstanceSyntax",
    "HierarchicalValueExpression",
    "HierarchyInstantiationSyntax",
    "IdWithExprCoverageBinInitializerSyntax",
    "IdentifierNameSyntax",
    "IdentifierSelectNameSyntax",
    "IfGenerateSyntax",
    "IfNonePathDeclarationSyntax",
    "IffEventClauseSyntax",
    "ImmediateAssertionMemberSyntax",
    "ImmediateAssertionStatement",
    "ImmediateAssertionStatementSyntax",
    "ImplementsClauseSyntax",
    "ImplicationConstraint",
    "ImplicationConstraintSyntax",
    "ImplicitAnsiPortSyntax",
    "ImplicitEventControl",
    "ImplicitEventControlSyntax",
    "ImplicitNonAnsiPortSyntax",
    "ImplicitTypeSyntax",
    "IncludeDirectiveSyntax",
    "IncludeMetadata",
    "InsideExpression",
    "InsideExpressionSyntax",
    "InstanceArraySymbol",
    "InstanceBodySymbol",
    "InstanceConfigRuleSyntax",
    "InstanceNameSyntax",
    "InstanceSymbol",
    "InstanceSymbolBase",
    "IntegerLiteral",
    "IntegerTypeSyntax",
    "IntegerVectorExpressionSyntax",
    "IntegralFlags",
    "IntegralType",
    "InterfacePortHeaderSyntax",
    "InterfacePortSymbol",
    "IntersectClauseSyntax",
    "InvalidAssertionExpr",
    "InvalidBinsSelectExpr",
    "InvalidConstraint",
    "InvalidExpression",
    "InvalidPattern",
    "InvalidStatement",
    "InvalidTimingControl",
    "InvocationExpressionSyntax",
    "IteratorSymbol",
    "JumpStatementSyntax",
    "KeywordNameSyntax",
    "KeywordTypeSyntax",
    "KnownSystemName",
    "LValue",
    "LValueReferenceExpression",
    "LanguageVersion",
    "LetDeclSymbol",
    "LetDeclarationSyntax",
    "LexerOptions",
    "LibraryDeclarationSyntax",
    "LibraryIncDirClauseSyntax",
    "LibraryIncludeStatementSyntax",
    "LibraryMapSyntax",
    "LineDirectiveSyntax",
    "LiteralBase",
    "LiteralExpressionSyntax",
    "LocalAssertionVarSymbol",
    "LocalVariableDeclarationSyntax",
    "Lookup",
    "LookupFlags",
    "LookupLocation",
    "LookupResult",
    "LookupResultFlags",
    "LoopConstraintSyntax",
    "LoopGenerateSyntax",
    "LoopStatementSyntax",
    "MacroActualArgumentListSyntax",
    "MacroActualArgumentSyntax",
    "MacroArgumentDefaultSyntax",
    "MacroFormalArgumentListSyntax",
    "MacroFormalArgumentSyntax",
    "MacroUsageSyntax",
    "MatchesClauseSyntax",
    "MemberAccessExpression",
    "MemberAccessExpressionSyntax",
    "MemberSyntax",
    "MethodFlags",
    "MethodPrototypeSymbol",
    "MinTypMax",
    "MinTypMaxExpression",
    "MinTypMaxExpressionSyntax",
    "ModportClockingPortSyntax",
    "ModportClockingSymbol",
    "ModportDeclarationSyntax",
    "ModportExplicitPortSyntax",
    "ModportItemSyntax",
    "ModportNamedPortSyntax",
    "ModportPortSymbol",
    "ModportPortSyntax",
    "ModportSimplePortListSyntax",
    "ModportSubroutinePortListSyntax",
    "ModportSubroutinePortSyntax",
    "ModportSymbol",
    "ModuleDeclarationSyntax",
    "ModuleHeaderSyntax",
    "MultiPortSymbol",
    "MultipleConcatenationExpressionSyntax",
    "NameSyntax",
    "NameValuePragmaExpressionSyntax",
    "NamedArgumentSyntax",
    "NamedBlockClauseSyntax",
    "NamedConditionalDirectiveExpressionSyntax",
    "NamedLabelSyntax",
    "NamedParamAssignmentSyntax",
    "NamedPortConnectionSyntax",
    "NamedStructurePatternMemberSyntax",
    "NamedTypeSyntax",
    "NamedValueExpression",
    "NetAliasSymbol",
    "NetAliasSyntax",
    "NetDeclarationSyntax",
    "NetPortHeaderSyntax",
    "NetStrengthSyntax",
    "NetSymbol",
    "NetType",
    "NetTypeDeclarationSyntax",
    "NewArrayExpression",
    "NewArrayExpressionSyntax",
    "NewClassExpression",
    "NewClassExpressionSyntax",
    "NewCovergroupExpression",
    "NonAnsiPortListSyntax",
    "NonAnsiPortSyntax",
    "NonAnsiUdpPortListSyntax",
    "NonConstantFunction",
    "Null",
    "NullLiteral",
    "NullType",
    "NumberPragmaExpressionSyntax",
    "OneStepDelayControl",
    "OneStepDelaySyntax",
    "OrderedArgumentSyntax",
    "OrderedParamAssignmentSyntax",
    "OrderedPortConnectionSyntax",
    "OrderedStructurePatternMemberSyntax",
    "PackageExportAllDeclarationSyntax",
    "PackageExportDeclarationSyntax",
    "PackageImportDeclarationSyntax",
    "PackageImportItemSyntax",
    "PackageSymbol",
    "PackedArrayType",
    "PackedStructType",
    "PackedUnionType",
    "ParamAssignmentSyntax",
    "ParameterDeclarationBaseSyntax",
    "ParameterDeclarationStatementSyntax",
    "ParameterDeclarationSyntax",
    "ParameterPortListSyntax",
    "ParameterSymbol",
    "ParameterSymbolBase",
    "ParameterValueAssignmentSyntax",
    "ParenExpressionListSyntax",
    "ParenPragmaExpressionSyntax",
    "ParenthesizedBinsSelectExprSyntax",
    "ParenthesizedConditionalDirectiveExpressionSyntax",
    "ParenthesizedEventExpressionSyntax",
    "ParenthesizedExpressionSyntax",
    "ParenthesizedPatternSyntax",
    "ParenthesizedPropertyExprSyntax",
    "ParenthesizedSequenceExprSyntax",
    "ParserOptions",
    "PathDeclarationSyntax",
    "PathDescriptionSyntax",
    "PathSuffixSyntax",
    "Pattern",
    "PatternCaseItemSyntax",
    "PatternCaseStatement",
    "PatternKind",
    "PatternSyntax",
    "PatternVarSymbol",
    "PortConcatenationSyntax",
    "PortConnection",
    "PortConnectionSyntax",
    "PortDeclarationSyntax",
    "PortExpressionSyntax",
    "PortHeaderSyntax",
    "PortListSyntax",
    "PortReferenceSyntax",
    "PortSymbol",
    "PostfixUnaryExpressionSyntax",
    "PragmaDirectiveSyntax",
    "PragmaExpressionSyntax",
    "PredefinedIntegerType",
    "PrefixUnaryExpressionSyntax",
    "PreprocessorOptions",
    "PrimaryBlockEventExpressionSyntax",
    "PrimaryExpressionSyntax",
    "PrimitiveInstanceSymbol",
    "PrimitiveInstantiationSyntax",
    "PrimitivePortDirection",
    "PrimitivePortSymbol",
    "PrimitiveSymbol",
    "ProceduralAssignStatement",
    "ProceduralAssignStatementSyntax",
    "ProceduralBlockKind",
    "ProceduralBlockSymbol",
    "ProceduralBlockSyntax",
    "ProceduralCheckerStatement",
    "ProceduralDeassignStatement",
    "ProceduralDeassignStatementSyntax",
    "ProductionSyntax",
    "PropertyCaseItemSyntax",
    "PropertyDeclarationSyntax",
    "PropertyExprSyntax",
    "PropertySpecSyntax",
    "PropertySymbol",
    "PropertyType",
    "PullStrengthSyntax",
    "PulseStyleDeclarationSyntax",
    "PulseStyleKind",
    "PulseStyleSymbol",
    "QueueDimensionSpecifierSyntax",
    "QueueType",
    "RandCaseItemSyntax",
    "RandCaseStatement",
    "RandCaseStatementSyntax",
    "RandJoinClauseSyntax",
    "RandMode",
    "RandSeqProductionSymbol",
    "RandSequenceStatement",
    "RandSequenceStatementSyntax",
    "RangeCoverageBinInitializerSyntax",
    "RangeDimensionSpecifierSyntax",
    "RangeListSyntax",
    "RangeSelectExpression",
    "RangeSelectSyntax",
    "RangeSelectionKind",
    "RealLiteral",
    "RepeatLoopStatement",
    "RepeatedEventControl",
    "RepeatedEventControlSyntax",
    "ReplicatedAssignmentPatternExpression",
    "ReplicatedAssignmentPatternSyntax",
    "ReplicationExpression",
    "ReportedDiagnostic",
    "ReturnStatement",
    "ReturnStatementSyntax",
    "RootSymbol",
    "RsCaseItemSyntax",
    "RsCaseSyntax",
    "RsCodeBlockSyntax",
    "RsElseClauseSyntax",
    "RsIfElseSyntax",
    "RsProdItemSyntax",
    "RsProdSyntax",
    "RsRepeatSyntax",
    "RsRuleSyntax",
    "RsWeightClauseSyntax",
    "SVInt",
    "ScalarType",
    "Scope",
    "ScopedNameSyntax",
    "ScriptSession",
    "SelectorSyntax",
    "SequenceConcatExpr",
    "SequenceDeclarationSyntax",
    "SequenceExprSyntax",
    "SequenceMatchListSyntax",
    "SequenceRange",
    "SequenceRepetition",
    "SequenceRepetitionSyntax",
    "SequenceSymbol",
    "SequenceType",
    "SequenceWithMatchExpr",
    "SetExprBinsSelectExpr",
    "SignalEventControl",
    "SignalEventExpressionSyntax",
    "SignedCastExpressionSyntax",
    "SimpleAssertionExpr",
    "SimpleAssignmentPatternExpression",
    "SimpleAssignmentPatternSyntax",
    "SimpleBinsSelectExprSyntax",
    "SimpleDirectiveSyntax",
    "SimplePathSuffixSyntax",
    "SimplePragmaExpressionSyntax",
    "SimplePropertyExprSyntax",
    "SimpleSequenceExprSyntax",
    "SimpleSystemSubroutine",
    "SolveBeforeConstraint",
    "SolveBeforeConstraintSyntax",
    "SourceBuffer",
    "SourceLibrary",
    "SourceLoader",
    "SourceLocation",
    "SourceManager",
    "SourceOptions",
    "SourceRange",
    "SpecifyBlockSymbol",
    "SpecifyBlockSyntax",
    "SpecparamDeclarationSyntax",
    "SpecparamDeclaratorSyntax",
    "SpecparamSymbol",
    "StandardCaseItemSyntax",
    "StandardPropertyCaseItemSyntax",
    "StandardRsCaseItemSyntax",
    "Statement",
    "StatementBlockKind",
    "StatementBlockSymbol",
    "StatementKind",
    "StatementList",
    "StatementSyntax",
    "StreamExpressionSyntax",
    "StreamExpressionWithRangeSyntax",
    "StreamingConcatenationExpression",
    "StreamingConcatenationExpressionSyntax",
    "StringLiteral",
    "StringType",
    "StrongWeakAssertionExpr",
    "StrongWeakPropertyExprSyntax",
    "StructUnionMemberSyntax",
    "StructUnionTypeSyntax",
    "StructurePattern",
    "StructurePatternMemberSyntax",
    "StructurePatternSyntax",
    "StructuredAssignmentPatternExpression",
    "StructuredAssignmentPatternSyntax",
    "SubroutineKind",
    "SubroutineSymbol",
    "SuperNewDefaultedArgsExpressionSyntax",
    "Symbol",
    "SymbolKind",
    "SyntaxKind",
    "SyntaxNode",
    "SyntaxPrinter",
    "SyntaxRewriter",
    "SyntaxTree",
    "SystemNameSyntax",
    "SystemSubroutine",
    "SystemTimingCheckKind",
    "SystemTimingCheckSymbol",
    "SystemTimingCheckSyntax",
    "TaggedPattern",
    "TaggedPatternSyntax",
    "TaggedUnionExpression",
    "TaggedUnionExpressionSyntax",
    "TempVarSymbol",
    "TextDiagnosticClient",
    "TimeLiteral",
    "TimeScale",
    "TimeScaleDirectiveSyntax",
    "TimeScaleMagnitude",
    "TimeScaleValue",
    "TimeUnit",
    "TimeUnitsDeclarationSyntax",
    "TimedStatement",
    "TimingCheckArgSyntax",
    "TimingCheckEventArgSyntax",
    "TimingCheckEventConditionSyntax",
    "TimingControl",
    "TimingControlExpressionSyntax",
    "TimingControlKind",
    "TimingControlStatementSyntax",
    "TimingControlSyntax",
    "TimingPathSymbol",
    "Token",
    "TokenKind",
    "TransListCoverageBinInitializerSyntax",
    "TransRangeSyntax",
    "TransRepeatRangeSyntax",
    "TransSetSyntax",
    "TransparentMemberSymbol",
    "Trivia",
    "TriviaKind",
    "Type",
    "TypeAliasType",
    "TypeAssignmentSyntax",
    "TypeParameterDeclarationSyntax",
    "TypeParameterSymbol",
    "TypePrinter",
    "TypePrintingOptions",
    "TypeRefType",
    "TypeReferenceExpression",
    "TypeReferenceSyntax",
    "TypedefDeclarationSyntax",
    "UdpBodySyntax",
    "UdpDeclarationSyntax",
    "UdpEdgeFieldSyntax",
    "UdpEntrySyntax",
    "UdpFieldBaseSyntax",
    "UdpInitialStmtSyntax",
    "UdpInputPortDeclSyntax",
    "UdpOutputPortDeclSyntax",
    "UdpPortDeclSyntax",
    "UdpPortListSyntax",
    "UdpSimpleFieldSyntax",
    "UnaryAssertionExpr",
    "UnaryAssertionOperator",
    "UnaryBinsSelectExpr",
    "UnaryBinsSelectExprSyntax",
    "UnaryConditionalDirectiveExpressionSyntax",
    "UnaryExpression",
    "UnaryOperator",
    "UnaryPropertyExprSyntax",
    "UnarySelectPropertyExprSyntax",
    "UnbasedUnsizedIntegerLiteral",
    "Unbounded",
    "UnboundedLiteral",
    "UnboundedType",
    "UnconditionalBranchDirectiveSyntax",
    "UnconnectedDrive",
    "UnconnectedDriveDirectiveSyntax",
    "UndefDirectiveSyntax",
    "UninstantiatedDefSymbol",
    "UniquePriorityCheck",
    "UniquenessConstraint",
    "UniquenessConstraintSyntax",
    "UnpackedStructType",
    "UnpackedUnionType",
    "UntypedType",
    "UserDefinedNetDeclarationSyntax",
    "ValueDriver",
    "ValueExpressionBase",
    "ValueRangeExpression",
    "ValueRangeExpressionSyntax",
    "ValueRangeKind",
    "ValueSymbol",
    "VariableDeclStatement",
    "VariableDimensionSyntax",
    "VariableFlags",
    "VariableLifetime",
    "VariablePattern",
    "VariablePatternSyntax",
    "VariablePortHeaderSyntax",
    "VariableSymbol",
    "VersionInfo",
    "VirtualInterfaceType",
    "VirtualInterfaceTypeSyntax",
    "Visibility",
    "VisitAction",
    "VoidCastedCallStatementSyntax",
    "VoidType",
    "WaitForkStatement",
    "WaitForkStatementSyntax",
    "WaitOrderStatement",
    "WaitOrderStatementSyntax",
    "WaitStatement",
    "WaitStatementSyntax",
    "WhileLoopStatement",
    "WildcardDimensionSpecifierSyntax",
    "WildcardImportSymbol",
    "WildcardPattern",
    "WildcardPatternSyntax",
    "WildcardPortConnectionSyntax",
    "WildcardPortListSyntax",
    "WildcardUdpPortListSyntax",
    "WithClauseSyntax",
    "WithFunctionClauseSyntax",
    "WithFunctionSampleSyntax",
    "clog2",
    "cls",
    "json",
    "literalBaseFromChar",
    "logic_t",
    "node_to_dict",
    "rewrite",
]


# Generic conversion from node to dict
def node_to_dict(node):
    if isinstance(node, (int, float, bool, str)):
        return node

    if node is None:
        return None

    cls_name = type(node).__name__

    if isinstance(node, (SyntaxKind, TokenKind, TriviaKind)):
        return str(node).split(".")[-1]

    if isinstance(node, SourceLocation):
        return {
            "type": cls_name,
            # "buffer": node.buffer, # TODO: Figure out how to serialize buffer
            "offset": node.offset,
        }

    if isinstance(node, list):
        return [node_to_dict(item) for item in node]

    if isinstance(node, dict):
        return {k: node_to_dict(v) for k, v in node.items()}

    text = str(node) if hasattr(node, "__str__") else None

    def custom_sort_key(item):
        # Put start before end, and sort others by name
        priority = {"kind": -100, "start": 0, "end": 1}
        return (priority.get(item, 20000), item)  # Secondary sort by name

    # Collect non-callable, non-private, non-cyclic attributes.
    exclude_fields = {"children", "parent", "child", "parents"}
    properties = {
        k: node_to_dict(getattr(node, k))
        for k in sorted(dir(node), key=custom_sort_key)
        if not k.startswith("_")
        and not callable(getattr(node, k))
        and k not in exclude_fields
    }

    result = {"type": cls_name, **properties}

    if text and not text.startswith("<") and not text.endswith(">"):
        result["text"] = text

    # Handle iterable children for SyntaxNode-like objects
    if hasattr(node, "__iter__"):
        result["children"] = [node_to_dict(child) for child in node]

    return result


# Extend relevant classes with `to_dict` and `to_json`
def _extend_with_serialization(cls):
    def to_dict(self):
        return node_to_dict(self)

    def to_json(self, **kwargs):
        return json.dumps(self.to_dict(), indent=2, **kwargs)

    cls.to_dict = to_dict
    cls.to_json = to_json


# Automatically register serialization for known node types
for cls in [SyntaxNode, Token, Trivia]:
    _extend_with_serialization(cls)
