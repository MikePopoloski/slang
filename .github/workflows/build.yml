name: CI Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        include:
          - preset: clang-sanitize
            os: ubuntu-22.04
          - preset: gcc-release
            os: ubuntu-22.04
          - preset: gcc-10-release
            os: ubuntu-22.04
          - preset: gcc-debug-shared
            os: ubuntu-22.04
          - preset: gcc-debug-noexcept
            os: ubuntu-22.04
          - preset: macos-release
            os: macos-13
          - preset: win64-release
            os: windows-latest
          - preset: win32-release
            os: windows-latest
          - preset: win64-debug-shared
            os: windows-latest
          - preset: win64-debug-noexcept
            os: windows-latest

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main"
        sudo apt-get update
        sudo apt-get install -y g++-12 g++-10 clang-16 clang-tidy-16
    - uses: ilammy/msvc-dev-cmd@v1
      if: matrix.os == 'windows-latest'
    - uses: maxim-lobanov/setup-xcode@v1
      if: matrix.os == 'macos-13'
      with:
        xcode-version: '14.3'
    - name: Configure
      run: cmake --preset ${{ matrix.preset }} -DSLANG_CI_BUILD=ON
    - name: Build
      run: cmake --build build/${{ matrix.preset }} -j8
    - name: Run tests
      run: |
        cd build/${{ matrix.preset }}
        ctest --output-on-failure --no-tests=error

  coverage:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-12 lcov
    - name: Configure
      run: cmake --preset=ci-coverage
    - name: Build
      run: cmake --build build/ci-coverage -j8
    - name: Run tests
      working-directory: build/ci-coverage
      run: ctest --output-on-failure --no-tests=error
    - name: Process coverage info
      run: cmake --build build/ci-coverage -t coverage
    - name: Submit to codecov.io
      uses: codecov/codecov-action@v3
      with:
        files: build/ci-coverage/coverage.info
        verbose: true

  bindings:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Configure
      run: cmake -B build -DSLANG_INCLUDE_PYLIB=ON
    - name: Build
      run: cmake --build build --config Release -j8
    - name: Run tests
      working-directory: build
      run: ctest --output-on-failure -C Release --no-tests=error

  conan:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: |
        pip3 install conan
        conan profile detect
    - name: Configure
      run: |
        conan install . -b missing
        cmake --preset conan-gcc-x86_64-release
    - name: Build
      run: cmake --build --preset conan-gcc-x86_64-release -j8
    - name: Run tests
      run: ctest --preset conan-gcc-x86_64-release --output-on-failure --no-tests=error
