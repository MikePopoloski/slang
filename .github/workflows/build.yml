name: CI Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_msvc:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive
    - uses: microsoft/setup-msbuild@v1.0.2
    - name: Configure
      shell: bash
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -DCMAKE_INSTALL_PREFIX=$HOME/slang/ -DSLANG_INCLUDE_PYLIB=ON
    - name: Build
      run: msbuild build/INSTALL.vcxproj -m -p:configuration=release -p:platform=x64
    - name: Run tests
      run: |
        cd build
        ctest -C Release --output-on-failure

  build_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Configure
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/slang/
      - name: Build
        run: |
          cd build
          make install -j8
      - name: Run tests
        run: ctest --output-on-failure

  build_linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - compiler: clang++-14
            flags: '-DCMAKE_BUILD_TYPE=Debug -DSLANG_COVERAGE=ON -DSLANG_SANITIZERS=undefined,address -DSLANG_RUN_CLANG_TIDY=ON'
          - compiler: g++-12
            flags: '-DCMAKE_BUILD_TYPE=Release'
          - compiler: g++-9
            flags: '-DCMAKE_BUILD_TYPE=Debug'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Install dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-14 main"
        sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu focal main universe"
        sudo apt-get update
        sudo apt-get install -y g++-12 g++-9 clang++-14 clang-tidy-14
    - name: Build
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        mkdir build
        cd build
        cmake .. -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} -DCI_BUILD=ON ${{ matrix.flags }} -DCMAKE_INSTALL_PREFIX=$HOME/slang/
        make install -j8
    - name: Run tests
      run: |
        export LLVM_PROFILE_FILE=%p.profraw
        cd build
        ctest --output-on-failure
    - name: Upload code coverage
      if: matrix.compiler == 'clang++-14'
      run: |
        cd build
        find . -name *.profraw -exec llvm-profdata-14 merge -o merged.profdata -sparse {} + ;
        llvm-cov-14 show bin/unittests -instr-profile=merged.profdata > coverage.txt
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov
