name: CI Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_msvc:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: microsoft/setup-msbuild@v1.0.0
    - name: Configure
      shell: bash
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 16 2019" -DCMAKE_INSTALL_PREFIX=$HOME/slang/
    - name: Build
      run: msbuild build/INSTALL.vcxproj -m -p:configuration=release -p:platform=x64
    - name: Run tests
      run: |
        cd build
        ctest -C Release --output-on-failure
    - name: Archive binaries
      run: |
        Compress-Archive $HOME/slang/ slang-windows.zip
    - name: Upload artifacts
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: SLANG_ARTIFACT_WIN
        path: slang-windows.zip

  build_linux:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - compiler: clang++-10
            flags: '-DCMAKE_BUILD_TYPE=Debug -DSLANG_COVERAGE=ON -DSLANG_SANITIZERS=undefined,address "-DCMAKE_CXX_CLANG_TIDY=/usr/lib/llvm-10/bin/clang-tidy;-quiet;-checks=-*,clang-analyzer-*,bugprone-*,performance-*,modernize-*,-modernize-use-auto,-modernize-use-trailing-return-type,-modernize-raw-string-literal,-modernize-use-nodiscard,-bugprone-suspicious-semicolon,-bugprone-branch-clone,-bugprone-sizeof-expression,-clang-analyzer-cplusplus.NewDelete*,-clang-analyzer-cplusplus.InnerPointer,misc-*,-misc-non-private-member-variables-in-classes,-modernize-avoid-c-arrays"'
          - compiler: g++-10
            flags: '-DCMAKE_BUILD_TYPE=Release'
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main"
        sudo apt-get update
        sudo apt-get install -y g++-10 clang++-10 clang-tidy-10
    - name: Build
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        mkdir build
        cd build
        cmake .. -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} -DCI_BUILD=ON ${{ matrix.flags }} -DCMAKE_INSTALL_PREFIX=$HOME/slang/
        make install -j8
    - name: Run tests
      run: |
        export LLVM_PROFILE_FILE=%p.profraw
        cd build
        ctest --output-on-failure
    - name: Upload code coverage
      if: matrix.compiler == 'clang++-10'
      run: |
        cd build
        find . -name *.profraw -exec llvm-profdata-10 merge -o merged.profdata -sparse {} + ;
        llvm-cov-10 show bin/unittests -instr-profile=merged.profdata > coverage.txt
        bash <(curl -s https://codecov.io/bash) || echo 'Codecov failed to upload'
    - name: Archive binaries
      if: matrix.compiler == 'g++-10'
      run: |
        strip --strip-unneeded $HOME/slang/bin/*
        strip --strip-unneeded $HOME/slang/lib/*
        tar -czvf slang-linux.tar.gz -C $HOME slang/
    - name: Upload artifacts
      if: matrix.compiler == 'g++-10' && github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: SLANG_ARTIFACT_LINUX
        path: slang-linux.tar.gz

  publish:
    runs-on: ubuntu-latest
    needs: [build_msvc, build_linux]
    if: github.event_name == 'push'
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: SLANG_ARTIFACT_WIN
    - uses: actions/download-artifact@v2
      with:
        name: SLANG_ARTIFACT_LINUX
    - uses: meeDamian/github-release@2.0
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"
        name: Nightly
        tag: nightly
        body: This is an autogenerated release from the last successful continuous integration build. The included prebuilt binaries should be considered unstable.
        prerelease: true
        allow_override: true
        gzip: false
        files: slang-linux.tar.gz slang-windows.zip
